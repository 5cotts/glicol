{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0","program":"/Users/chaosprint/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","dasp_signal","--edition=2018","/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"dasp_envelope\"","--cfg","feature=\"dasp_rms\"","--cfg","feature=\"dasp_window\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=1f4a7f7cb7cbcee3","-C","extra-filename=-1f4a7f7cb7cbcee3","--out-dir","/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps","-L","dependency=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps","--extern","dasp_envelope=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_envelope-aa5eb82a766b8130.rmeta","--extern","dasp_frame=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_frame-fa325a60773f21d8.rmeta","--extern","dasp_interpolate=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_interpolate-06076f3f48b97216.rmeta","--extern","dasp_peak=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_peak-ff4942469d191b04.rmeta","--extern","dasp_ring_buffer=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_ring_buffer-12b92e79e8724045.rmeta","--extern","dasp_rms=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_rms-a513b986f15b453e.rmeta","--extern","dasp_sample=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_sample-b638ae605e5f5436.rmeta","--extern","dasp_window=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_window-202e1c1901c017d7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/chaosprint/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_signal-1f4a7f7cb7cbcee3.rmeta"},"prelude":{"crate_id":{"name":"dasp_signal","disambiguator":[6996685705614709795,5257928466816614616]},"crate_root":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src","external_crates":[{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9606925100264359032,12531971508192552739]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17187672715010298091,8744209918715530773]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15887813922859449425,14244592339943736272]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6807992320260993406,9894278173044996986]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17858480672457447890,14967053264370168355]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1320274826319993033,12580344779796895143]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5371179889215182298,2673167689761608764]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3578723082929147264,11802062942665263000]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12064590987128239469,16657797211233097221]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[9585105124653066898,10355053755662228341]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[168442059660610991,16640229565854074068]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13744766486950275495,4356178648036430150]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4695427281829409190,666464352563047434]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[825342386373460966,7285997970727292365]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":15,"id":{"name":"dasp_frame","disambiguator":[1581612173861956889,5984927822764315227]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":16,"id":{"name":"dasp_sample","disambiguator":[6408490087116748643,9102689448921963525]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":17,"id":{"name":"dasp_interpolate","disambiguator":[10868034933050101286,14250785113738949845]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","num":18,"id":{"name":"dasp_ring_buffer","disambiguator":[16401509384445664778,14337884719814784892]}}],"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":0,"byte_end":72044,"line_start":1,"line_end":2505,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":0,"byte_end":72044,"line_start":1,"line_end":2505,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":33},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":81},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":385},{"krate":0,"index":389},{"krate":0,"index":396},{"krate":0,"index":401},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":428},{"krate":0,"index":432},{"krate":0,"index":442},{"krate":0,"index":440},{"krate":0,"index":438},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":503},{"krate":0,"index":507},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":526},{"krate":0,"index":530},{"krate":0,"index":535},{"krate":0,"index":539},{"krate":0,"index":545},{"krate":0,"index":550},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":562},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":583},{"krate":0,"index":587},{"krate":0,"index":593},{"krate":0,"index":92},{"krate":0,"index":99},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":606},{"krate":0,"index":611},{"krate":0,"index":617},{"krate":0,"index":621},{"krate":0,"index":626},{"krate":0,"index":630},{"krate":0,"index":635},{"krate":0,"index":640},{"krate":0,"index":646},{"krate":0,"index":650},{"krate":0,"index":655},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":667},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":150},{"krate":0,"index":155},{"krate":0,"index":160},{"krate":0,"index":167},{"krate":0,"index":175},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":192},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":204},{"krate":0,"index":211},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":232},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":271},{"krate":0,"index":277},{"krate":0,"index":282},{"krate":0,"index":288},{"krate":0,"index":295},{"krate":0,"index":300},{"krate":0,"index":306},{"krate":0,"index":310},{"krate":0,"index":314},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":343},{"krate":0,"index":349}],"decl_id":null,"docs":" Use the [**Signal**](./trait.Signal.html) trait to abstract over infinite-iterator-like types\n that yield **Frame**s. The **Signal** trait provides methods for adding, scaling, offsetting,\n multiplying, clipping, generating frame iterators and more.","sig":null,"attributes":[{"value":"! Use the [**Signal**](./trait.Signal.html) trait to abstract over infinite-iterator-like types","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":0,"byte_end":97,"line_start":1,"line_end":1,"column_start":1,"column_end":98}},{"value":"! that yield **Frame**s. The **Signal** trait provides methods for adding, scaling, offsetting,","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":98,"byte_end":195,"line_start":2,"line_end":2,"column_start":1,"column_end":98}},{"value":"! multiplying, clipping, generating frame iterators and more.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":196,"byte_end":259,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":260,"byte_end":263,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! You may also find a series of **Signal** source functions, including:","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":264,"byte_end":337,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":338,"byte_end":341,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! - [equilibrium](./fn.equilibrium.html) for generating \"silent\" frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":342,"byte_end":416,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"! - [phase](./fn.phase.html) for a stepping phase, useful for oscillators.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":417,"byte_end":493,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"! - [sine](./fn.sine.html) for generating a sine waveform.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":494,"byte_end":554,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"! - [saw](./fn.saw.html) for generating a sawtooth waveform.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":555,"byte_end":617,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"! - [square](./fn.square.html) for generating a square waveform.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":618,"byte_end":684,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"! - [noise](./fn.noise.html) for generating a noise waveform.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":685,"byte_end":748,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"! - [noise_simplex](./fn.noise_simplex.html) for generating a 1D simplex noise waveform.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":749,"byte_end":839,"line_start":13,"line_end":13,"column_start":1,"column_end":91}},{"value":"! - [gen](./fn.gen.html) for generating frames of type F from some `Fn() -> F`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":840,"byte_end":921,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"! - [gen_mut](./fn.gen_mut.html) for generating frames of type F from some `FnMut() -> F`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":922,"byte_end":1014,"line_start":15,"line_end":15,"column_start":1,"column_end":93}},{"value":"! - [from_iter](./fn.from_iter.html) for converting an iterator yielding frames to a signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1015,"byte_end":1109,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"! - [from_interleaved_samples_iter](./fn.from_interleaved_samples_iter.html) for converting an","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1110,"byte_end":1206,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"! iterator yielding interleaved samples to a signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1207,"byte_end":1261,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1262,"byte_end":1265,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! Working with **Signal**s allows for easy, readable creation of rich and complex DSP graphs with","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1266,"byte_end":1365,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"! a simple and familiar API.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1366,"byte_end":1396,"line_start":21,"line_end":21,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1397,"byte_end":1400,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ### Optional Features","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1401,"byte_end":1426,"line_start":23,"line_end":23,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1427,"byte_end":1430,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! - The **boxed** feature (or **signal-boxed** feature if using `dasp`) provides a **Signal**","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1431,"byte_end":1526,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"!   implementation for `Box<dyn Signal>`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1527,"byte_end":1570,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"! - The **bus** feature (or **signal-bus** feature if using `dasp`) provides the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1571,"byte_end":1653,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"!   [**SignalBus**](./bus/trait.SignalBus.html) trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1654,"byte_end":1710,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"! - The **envelope** feature (or **signal-envelope** feature if using `dasp`) provides the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1711,"byte_end":1803,"line_start":29,"line_end":29,"column_start":1,"column_end":93}},{"value":"!   [**SignalEnvelope**](./envelope/trait.SignalEnvelope.html) trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1804,"byte_end":1875,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"! - The **rms** feature (or **signal-rms** feature if using `dasp`) provides the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1876,"byte_end":1958,"line_start":31,"line_end":31,"column_start":1,"column_end":83}},{"value":"!   [**SignalRms**](./rms/trait.SignalRms.html) trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":1959,"byte_end":2015,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"! - The **window** feature (or **signal-window** feature if using `dasp`) provides the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2016,"byte_end":2104,"line_start":33,"line_end":33,"column_start":1,"column_end":89}},{"value":"!   [**window**](./window/index.html) module.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2105,"byte_end":2152,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2153,"byte_end":2156,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! ### no_std","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2157,"byte_end":2171,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2172,"byte_end":2175,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! If working in a `no_std` context, you can disable the default **std** feature with","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2176,"byte_end":2262,"line_start":38,"line_end":38,"column_start":1,"column_end":87}},{"value":"! `--no-default-features`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2263,"byte_end":2291,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2292,"byte_end":2295,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! To enable all of the above features in a `no_std` context, enable the **all-no-std** feature.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2296,"byte_end":2393,"line_start":41,"line_end":41,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interpolate","qualname":"::interpolate","value":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":354},{"krate":0,"index":361},{"krate":0,"index":15},{"krate":0,"index":27}],"decl_id":null,"docs":" The [**Converter**](./struct.Converter.html) type for interpolating the rate of a signal.\n","sig":null,"attributes":[{"value":"! The [**Converter**](./struct.Converter.html) type for interpolating the rate of a signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72046,"byte_end":72139,"line_start":1,"line_end":1,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":354},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72523,"byte_end":72532,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"Converter","qualname":"::interpolate::Converter","value":"Converter {  }","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"decl_id":null,"docs":" A signal type that converts the rate at which frames are yielded from some source signal to\n some target rate.","sig":null,"attributes":[{"value":"/ A signal type that converts the rate at which frames are yielded from some source signal to","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72197,"byte_end":72292,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ some target rate.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72293,"byte_end":72314,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72315,"byte_end":72318,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Other names for `sample::interpolate::Converter` might include:","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72319,"byte_end":72386,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72387,"byte_end":72390,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - Sample rate converter.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72391,"byte_end":72419,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/ - {Up/Down}sampler.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72420,"byte_end":72443,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ - Sample interpolater.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72444,"byte_end":72470,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ - Sample decimator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72471,"byte_end":72494,"line_start":14,"line_end":14,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72896,"byte_end":72909,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"from_hz_to_hz","qualname":"<Converter<S, I>>::from_hz_to_hz","value":"fn (source: S, interpolator: I, source_hz: f64, target_hz: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Converter` from the source frames and the source and target sample rates\n (in Hz).\n","sig":null,"attributes":[{"value":"/ Construct a new `Converter` from the source frames and the source and target sample rates","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72760,"byte_end":72853,"line_start":32,"line_end":32,"column_start":5,"column_end":98}},{"value":"/ (in Hz).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72858,"byte_end":72870,"line_start":33,"line_end":33,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72875,"byte_end":72884,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73490,"byte_end":73507,"line_start":46,"line_end":46,"column_start":12,"column_end":29},"name":"scale_playback_hz","qualname":"<Converter<S, I>>::scale_playback_hz","value":"fn (source: S, interpolator: I, scale: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Converter` from the source frames and the amount by which the current\n ***playback*** **rate** (not sample rate) should be multiplied to reach the new playback\n rate.","sig":null,"attributes":[{"value":"/ Construct a new `Converter` from the source frames and the amount by which the current","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73068,"byte_end":73158,"line_start":39,"line_end":39,"column_start":5,"column_end":95}},{"value":"/ ***playback*** **rate** (not sample rate) should be multiplied to reach the new playback","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73163,"byte_end":73255,"line_start":40,"line_end":40,"column_start":5,"column_end":97}},{"value":"/ rate.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73260,"byte_end":73269,"line_start":41,"line_end":41,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73274,"byte_end":73277,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ For example, if our `source_frames` is a sine wave oscillating at a frequency of 2hz and","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73282,"byte_end":73374,"line_start":43,"line_end":43,"column_start":5,"column_end":97}},{"value":"/ we wanted to convert it to a frequency of 3hz, the given `scale` should be `1.5`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73379,"byte_end":73464,"line_start":44,"line_end":44,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73469,"byte_end":73478,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74382,"byte_end":74397,"line_start":68,"line_end":68,"column_start":12,"column_end":27},"name":"scale_sample_hz","qualname":"<Converter<S, I>>::scale_sample_hz","value":"fn (source: S, interpolator: I, scale: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Converter` from the source frames and the amount by which the current\n ***sample*** **rate** (not playback rate) should be multiplied to reach the new sample\n rate.","sig":null,"attributes":[{"value":"/ Construct a new `Converter` from the source frames and the amount by which the current","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73862,"byte_end":73952,"line_start":59,"line_end":59,"column_start":5,"column_end":95}},{"value":"/ ***sample*** **rate** (not playback rate) should be multiplied to reach the new sample","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":73957,"byte_end":74047,"line_start":60,"line_end":60,"column_start":5,"column_end":95}},{"value":"/ rate.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74052,"byte_end":74061,"line_start":61,"line_end":61,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74066,"byte_end":74069,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ If our `source_frames` are being sampled at a rate of 44_100hz and we want to","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74074,"byte_end":74155,"line_start":63,"line_end":63,"column_start":5,"column_end":86}},{"value":"/ convert to a sample rate of 96_000hz, the given `scale` should be `96_000.0 / 44_100.0`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74160,"byte_end":74252,"line_start":64,"line_end":64,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74257,"byte_end":74260,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This is the same as calling `Converter::scale_playback_hz(source_frames, 1.0 / scale)`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74265,"byte_end":74356,"line_start":66,"line_end":66,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74361,"byte_end":74370,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74724,"byte_end":74736,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"set_hz_to_hz","qualname":"<Converter<S, I>>::set_hz_to_hz","value":"fn (&mut self, source_hz: f64, target_hz: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the `source_to_target_ratio` internally given the source and target hz.","sig":null,"attributes":[{"value":"/ Update the `source_to_target_ratio` internally given the source and target hz.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74526,"byte_end":74608,"line_start":72,"line_end":72,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74613,"byte_end":74616,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This method might be useful for changing the sample rate during playback.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74621,"byte_end":74698,"line_start":74,"line_end":74,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74703,"byte_end":74712,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75039,"byte_end":75060,"line_start":84,"line_end":84,"column_start":12,"column_end":33},"name":"set_playback_hz_scale","qualname":"<Converter<S, I>>::set_playback_hz_scale","value":"fn (&mut self, scale: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the `source_to_target_ratio` internally given a new **playback rate** multiplier.","sig":null,"attributes":[{"value":"/ Update the `source_to_target_ratio` internally given a new **playback rate** multiplier.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74851,"byte_end":74943,"line_start":80,"line_end":80,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74948,"byte_end":74951,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This method is useful for dynamically changing rates.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":74956,"byte_end":75013,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75018,"byte_end":75027,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75328,"byte_end":75347,"line_start":92,"line_end":92,"column_start":12,"column_end":31},"name":"set_sample_hz_scale","qualname":"<Converter<S, I>>::set_sample_hz_scale","value":"fn (&mut self, scale: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the `source_to_target_ratio` internally given a new **sample rate** multiplier.","sig":null,"attributes":[{"value":"/ Update the `source_to_target_ratio` internally given a new **sample rate** multiplier.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75142,"byte_end":75232,"line_start":88,"line_end":88,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75237,"byte_end":75240,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ This method is useful for dynamically changing rates.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75245,"byte_end":75302,"line_start":90,"line_end":90,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75307,"byte_end":75316,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75524,"byte_end":75530,"line_start":98,"line_end":98,"column_start":12,"column_end":18},"name":"source","qualname":"<Converter<S, I>>::source","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Borrow the `source_frames` Interpolator from the `Converter`.\n","sig":null,"attributes":[{"value":"/ Borrow the `source_frames` Interpolator from the `Converter`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75433,"byte_end":75498,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75503,"byte_end":75512,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75673,"byte_end":75683,"line_start":104,"line_end":104,"column_start":12,"column_end":22},"name":"source_mut","qualname":"<Converter<S, I>>::source_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the `source_frames` Iterator from the `Converter`.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the `source_frames` Iterator from the `Converter`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75578,"byte_end":75647,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75652,"byte_end":75661,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75834,"byte_end":75845,"line_start":110,"line_end":110,"column_start":12,"column_end":23},"name":"into_source","qualname":"<Converter<S, I>>::into_source","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Drop `self` and return the internal `source_frames` Iterator.\n","sig":null,"attributes":[{"value":"/ Drop `self` and return the internal `source_frames` Iterator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75743,"byte_end":75808,"line_start":108,"line_end":108,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75813,"byte_end":75822,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3776,"byte_end":3782,"line_start":86,"line_end":86,"column_start":11,"column_end":17},"name":"Signal","qualname":"::Signal","value":"Signal","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80}],"decl_id":null,"docs":" Types that yield `Frame`s of a one-or-more-channel PCM signal.","sig":null,"attributes":[{"value":"/ Types that yield `Frame`s of a one-or-more-channel PCM signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3093,"byte_end":3159,"line_start":76,"line_end":76,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3160,"byte_end":3163,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ For example, `Signal` allows us to add two signals, modulate a signal's amplitude by another","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3164,"byte_end":3260,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"/ signal, scale a signal's amplitude and much more.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3261,"byte_end":3314,"line_start":79,"line_end":79,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3315,"byte_end":3318,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ The **Signal** trait is inspired by the `Iterator` trait but is different in the sense that it","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3319,"byte_end":3417,"line_start":81,"line_end":81,"column_start":1,"column_end":99}},{"value":"/ will always yield frames and will never return `None`. That said, implementors of `Signal` may","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3418,"byte_end":3516,"line_start":82,"line_end":82,"column_start":1,"column_end":99}},{"value":"/ optionally indicate exhaustian via the `is_exhausted` method. This allows for converting","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3517,"byte_end":3609,"line_start":83,"line_end":83,"column_start":1,"column_end":93}},{"value":"/ exhaustive signals back to iterators that are well behaved. Calling **next** on an exhausted","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3610,"byte_end":3706,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"/ signal should always yield `Self::Frame::EQUILIBRIUM`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3707,"byte_end":3765,"line_start":85,"line_end":85,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3845,"byte_end":3850,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"name":"Frame","qualname":"::Signal::Frame","value":"type Frame: Frame;","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" The `Frame` type returned by the `Signal`.\n","sig":null,"attributes":[{"value":"/ The `Frame` type returned by the `Signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3789,"byte_end":3835,"line_start":87,"line_end":87,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4855,"byte_end":4859,"line_start":121,"line_end":121,"column_start":8,"column_end":12},"name":"next","qualname":"::Signal::next","value":"fn (&mut self) -> Self::Frame","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Yield the next `Frame` in the `Signal`.","sig":null,"attributes":[{"value":"/ Yield the next `Frame` in the `Signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3864,"byte_end":3907,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3912,"byte_end":3915,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3920,"byte_end":3933,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3938,"byte_end":3941,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ An example of a mono (single-channel) signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":3946,"byte_end":3995,"line_start":94,"line_end":94,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4000,"byte_end":4003,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4008,"byte_end":4019,"line_start":96,"line_end":96,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4024,"byte_end":4070,"line_start":97,"line_end":97,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4075,"byte_end":4078,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4083,"byte_end":4098,"line_start":99,"line_end":99,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.2, -0.6, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4103,"byte_end":4141,"line_start":100,"line_end":100,"column_start":5,"column_end":43}},{"value":"/     let mut signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4146,"byte_end":4213,"line_start":101,"line_end":101,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(signal.next(), 0.2);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4218,"byte_end":4257,"line_start":102,"line_end":102,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(signal.next(), -0.6);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4262,"byte_end":4302,"line_start":103,"line_end":103,"column_start":5,"column_end":45}},{"value":"/     assert_eq!(signal.next(), 0.4);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4307,"byte_end":4346,"line_start":104,"line_end":104,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4351,"byte_end":4356,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4361,"byte_end":4368,"line_start":106,"line_end":106,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4373,"byte_end":4376,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ An example of a stereo (dual-channel) signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4381,"byte_end":4430,"line_start":108,"line_end":108,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4435,"byte_end":4438,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4443,"byte_end":4454,"line_start":110,"line_end":110,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4459,"byte_end":4505,"line_start":111,"line_end":111,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4510,"byte_end":4513,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4518,"byte_end":4533,"line_start":113,"line_end":113,"column_start":5,"column_end":20}},{"value":"/     let frames = [[0.2, 0.2], [-0.6, -0.6], [0.4, 0.4]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4538,"byte_end":4598,"line_start":114,"line_end":114,"column_start":5,"column_end":65}},{"value":"/     let mut signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4603,"byte_end":4670,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(signal.next(), [0.2, 0.2]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4675,"byte_end":4721,"line_start":116,"line_end":116,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(signal.next(), [-0.6, -0.6]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4726,"byte_end":4774,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(signal.next(), [0.4, 0.4]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4779,"byte_end":4825,"line_start":118,"line_end":118,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4830,"byte_end":4835,"line_start":119,"line_end":119,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4840,"byte_end":4847,"line_start":120,"line_end":120,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7177,"byte_end":7189,"line_start":168,"line_end":168,"column_start":8,"column_end":20},"name":"is_exhausted","qualname":"::Signal::is_exhausted","value":"fn (&self) -> bool","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Whether or not the signal is exhausted of meaningful frames.","sig":null,"attributes":[{"value":"/ Whether or not the signal is exhausted of meaningful frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4892,"byte_end":4956,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4961,"byte_end":4964,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ By default, this returns `false` and assumes that the `Signal` is infinite.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":4969,"byte_end":5048,"line_start":125,"line_end":125,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5053,"byte_end":5056,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ As an example, `signal::FromIterator` becomes exhausted once the inner `Iterator` has been","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5061,"byte_end":5155,"line_start":127,"line_end":127,"column_start":5,"column_end":99}},{"value":"/ exhausted. `Sine` on the other hand will always return `false` as it will produce","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5160,"byte_end":5245,"line_start":128,"line_end":128,"column_start":5,"column_end":90}},{"value":"/ meaningful values infinitely.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5250,"byte_end":5283,"line_start":129,"line_end":129,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5288,"byte_end":5291,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ It should be rare for users to need to call this method directly, unless they are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5296,"byte_end":5381,"line_start":131,"line_end":131,"column_start":5,"column_end":90}},{"value":"/ implementing their own custom `Signal`s. Instead, idiomatic code will tend toward the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5386,"byte_end":5475,"line_start":132,"line_end":132,"column_start":5,"column_end":94}},{"value":"/ `Signal::until_exhasted` method which produces an `Iterator` that yields `Frame`s until","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5480,"byte_end":5571,"line_start":133,"line_end":133,"column_start":5,"column_end":96}},{"value":"/ `Signal::is_exhausted` returns `true`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5576,"byte_end":5618,"line_start":134,"line_end":134,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5623,"byte_end":5626,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Adaptors that source frames from more than one signal (`AddAmp`, `MulHz`, etc) will return","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5631,"byte_end":5725,"line_start":136,"line_end":136,"column_start":5,"column_end":99}},{"value":"/ `true` if *any* of the source signals return `true`. In this sense exhaustiveness is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5730,"byte_end":5818,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ contagious. This can be likened to the way that `Iterator::zip` begins returning `None`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5823,"byte_end":5914,"line_start":138,"line_end":138,"column_start":5,"column_end":96}},{"value":"/ when either `A` or `B` begins returning `None`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5919,"byte_end":5970,"line_start":139,"line_end":139,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5975,"byte_end":5978,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5983,"byte_end":5994,"line_start":141,"line_end":141,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":5999,"byte_end":6045,"line_start":142,"line_end":142,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6050,"byte_end":6053,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6058,"byte_end":6073,"line_start":144,"line_end":144,"column_start":5,"column_end":20}},{"value":"/     // Infinite signals always return `false`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6078,"byte_end":6128,"line_start":145,"line_end":145,"column_start":5,"column_end":55}},{"value":"/     let sine_signal = signal::rate(44_100.0).const_hz(400.0).sine();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6133,"byte_end":6205,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/     assert_eq!(sine_signal.is_exhausted(), false);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6210,"byte_end":6264,"line_start":147,"line_end":147,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6269,"byte_end":6272,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/     // Signals over iterators return `true` when the inner iterator is exhausted.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6277,"byte_end":6362,"line_start":149,"line_end":149,"column_start":5,"column_end":90}},{"value":"/     let frames = [0.2, -0.6, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6367,"byte_end":6405,"line_start":150,"line_end":150,"column_start":5,"column_end":43}},{"value":"/     let mut iter_signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6410,"byte_end":6482,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/     assert_eq!(iter_signal.is_exhausted(), false);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6487,"byte_end":6541,"line_start":152,"line_end":152,"column_start":5,"column_end":59}},{"value":"/     iter_signal.by_ref().take(3).count();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6546,"byte_end":6591,"line_start":153,"line_end":153,"column_start":5,"column_end":50}},{"value":"/     assert_eq!(iter_signal.is_exhausted(), true);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6596,"byte_end":6649,"line_start":154,"line_end":154,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6654,"byte_end":6657,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/     // Adaptors return `true` when the first signal becomes exhausted.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6662,"byte_end":6736,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/     let a = [1, 2];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6741,"byte_end":6764,"line_start":157,"line_end":157,"column_start":5,"column_end":28}},{"value":"/     let b = [1, 2, 3, 4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6769,"byte_end":6798,"line_start":158,"line_end":158,"column_start":5,"column_end":34}},{"value":"/     let a_signal = signal::from_iter(a.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6803,"byte_end":6863,"line_start":159,"line_end":159,"column_start":5,"column_end":65}},{"value":"/     let b_signal = signal::from_iter(b.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6868,"byte_end":6928,"line_start":160,"line_end":160,"column_start":5,"column_end":65}},{"value":"/     let mut added = a_signal.add_amp(b_signal);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6933,"byte_end":6984,"line_start":161,"line_end":161,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(added.is_exhausted(), false);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":6989,"byte_end":7037,"line_start":162,"line_end":162,"column_start":5,"column_end":53}},{"value":"/     added.by_ref().take(2).count();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7042,"byte_end":7081,"line_start":163,"line_end":163,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(added.is_exhausted(), true);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7086,"byte_end":7133,"line_start":164,"line_end":164,"column_start":5,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7138,"byte_end":7143,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7148,"byte_end":7155,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7160,"byte_end":7169,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8278,"byte_end":8281,"line_start":206,"line_end":206,"column_start":8,"column_end":11},"name":"map","qualname":"::Signal::map","value":"fn <M, F> (self, map: M) -> Map<Self, M, F>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" A signal that maps one set of frames to another.","sig":null,"attributes":[{"value":"/ A signal that maps one set of frames to another.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7232,"byte_end":7284,"line_start":172,"line_end":172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7289,"byte_end":7292,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7297,"byte_end":7310,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7315,"byte_end":7318,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7323,"byte_end":7334,"line_start":176,"line_end":176,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7339,"byte_end":7385,"line_start":177,"line_end":177,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7390,"byte_end":7393,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7398,"byte_end":7413,"line_start":179,"line_end":179,"column_start":5,"column_end":20}},{"value":"/     let frames = signal::gen(|| 0.5);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7418,"byte_end":7459,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/     let mut mapper = frames.map(|f| [f, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7464,"byte_end":7515,"line_start":181,"line_end":181,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(mapper.next(), [0.5, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7520,"byte_end":7567,"line_start":182,"line_end":182,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(mapper.next(), [0.5, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7572,"byte_end":7619,"line_start":183,"line_end":183,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(mapper.next(), [0.5, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7624,"byte_end":7671,"line_start":184,"line_end":184,"column_start":5,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7676,"byte_end":7681,"line_start":185,"line_end":185,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7686,"byte_end":7693,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7698,"byte_end":7701,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ This can also be useful for monitoring the peak values of a signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7706,"byte_end":7777,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7782,"byte_end":7785,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7790,"byte_end":7797,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7802,"byte_end":7828,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/ use dasp_peak as peak;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7833,"byte_end":7859,"line_start":192,"line_end":192,"column_start":5,"column_end":31}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7864,"byte_end":7910,"line_start":193,"line_end":193,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7915,"byte_end":7918,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7923,"byte_end":7938,"line_start":195,"line_end":195,"column_start":5,"column_end":20}},{"value":"/     let sine_wave = signal::rate(4.0).const_hz(1.0).sine();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":7943,"byte_end":8006,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/     let mut peak = sine_wave","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8011,"byte_end":8043,"line_start":197,"line_end":197,"column_start":5,"column_end":37}},{"value":"/         .map(peak::full_wave)","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8048,"byte_end":8081,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/         .map(|f| f.round());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8086,"byte_end":8118,"line_start":199,"line_end":199,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8123,"byte_end":8142,"line_start":200,"line_end":200,"column_start":5,"column_end":24}},{"value":"/         peak.take(4).collect::<Vec<_>>(),","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8147,"byte_end":8192,"line_start":201,"line_end":201,"column_start":5,"column_end":50}},{"value":"/         vec![0.0, 1.0, 0.0, 1.0]","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8197,"byte_end":8233,"line_start":202,"line_end":202,"column_start":5,"column_end":41}},{"value":"/     );","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8238,"byte_end":8248,"line_start":203,"line_end":203,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8253,"byte_end":8258,"line_start":204,"line_end":204,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8263,"byte_end":8270,"line_start":205,"line_end":205,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9079,"byte_end":9086,"line_start":235,"line_end":235,"column_start":8,"column_end":15},"name":"zip_map","qualname":"::Signal::zip_map","value":"fn <O, M, F> (self, other: O, map: M) -> ZipMap<Self, O, M, F>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" A signal that maps one set of frames to another.","sig":null,"attributes":[{"value":"/ A signal that maps one set of frames to another.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8541,"byte_end":8593,"line_start":219,"line_end":219,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8598,"byte_end":8601,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8606,"byte_end":8619,"line_start":221,"line_end":221,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8624,"byte_end":8627,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8632,"byte_end":8643,"line_start":223,"line_end":223,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8648,"byte_end":8694,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8699,"byte_end":8702,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8707,"byte_end":8722,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/     let frames = signal::gen(|| 0.5);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8727,"byte_end":8768,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"/     let more_frames = signal::gen(|| 0.25);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8773,"byte_end":8820,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/     let mut mapper = frames.zip_map(more_frames, |f, o| [f, o]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8825,"byte_end":8893,"line_start":229,"line_end":229,"column_start":5,"column_end":73}},{"value":"/     assert_eq!(mapper.next(), [0.5, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8898,"byte_end":8945,"line_start":230,"line_end":230,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(mapper.next(), [0.5, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":8950,"byte_end":8997,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(mapper.next(), [0.5, 0.25]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9002,"byte_end":9049,"line_start":232,"line_end":232,"column_start":5,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9054,"byte_end":9059,"line_start":233,"line_end":233,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9064,"byte_end":9071,"line_start":234,"line_end":234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10047,"byte_end":10054,"line_start":268,"line_end":268,"column_start":8,"column_end":15},"name":"add_amp","qualname":"::Signal::add_amp","value":"fn <S> (self, other: S) -> AddAmp<Self, S>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Provides an iterator that yields the sum of the frames yielded by both `other` and `self`\n in lock-step.","sig":null,"attributes":[{"value":"/ Provides an iterator that yields the sum of the frames yielded by both `other` and `self`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9421,"byte_end":9514,"line_start":250,"line_end":250,"column_start":5,"column_end":98}},{"value":"/ in lock-step.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9519,"byte_end":9536,"line_start":251,"line_end":251,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9541,"byte_end":9544,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9549,"byte_end":9562,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9567,"byte_end":9570,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9575,"byte_end":9586,"line_start":255,"line_end":255,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9591,"byte_end":9637,"line_start":256,"line_end":256,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9642,"byte_end":9645,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9650,"byte_end":9665,"line_start":258,"line_end":258,"column_start":5,"column_end":20}},{"value":"/     let a = [0.2, -0.6, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9670,"byte_end":9703,"line_start":259,"line_end":259,"column_start":5,"column_end":38}},{"value":"/     let b = [0.2, 0.1, -0.8];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9708,"byte_end":9741,"line_start":260,"line_end":260,"column_start":5,"column_end":38}},{"value":"/     let a_signal = signal::from_iter(a.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9746,"byte_end":9806,"line_start":261,"line_end":261,"column_start":5,"column_end":65}},{"value":"/     let b_signal = signal::from_iter(b.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9811,"byte_end":9871,"line_start":262,"line_end":262,"column_start":5,"column_end":65}},{"value":"/     let added: Vec<_> = a_signal.add_amp(b_signal).take(3).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9876,"byte_end":9949,"line_start":263,"line_end":263,"column_start":5,"column_end":78}},{"value":"/     assert_eq!(added, vec![0.4, -0.5, -0.4]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":9954,"byte_end":10003,"line_start":264,"line_end":264,"column_start":5,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10008,"byte_end":10013,"line_start":265,"line_end":265,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10018,"byte_end":10025,"line_start":266,"line_end":266,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10030,"byte_end":10039,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11001,"byte_end":11008,"line_start":298,"line_end":298,"column_start":8,"column_end":15},"name":"mul_amp","qualname":"::Signal::mul_amp","value":"fn <S> (self, other: S) -> MulAmp<Self, S>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Provides an iterator that yields the product of the frames yielded by both `other` and\n `self` in lock-step.","sig":null,"attributes":[{"value":"/ Provides an iterator that yields the product of the frames yielded by both `other` and","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10369,"byte_end":10459,"line_start":280,"line_end":280,"column_start":5,"column_end":95}},{"value":"/ `self` in lock-step.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10464,"byte_end":10488,"line_start":281,"line_end":281,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10493,"byte_end":10496,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10501,"byte_end":10514,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10519,"byte_end":10522,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10527,"byte_end":10538,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10543,"byte_end":10589,"line_start":286,"line_end":286,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10594,"byte_end":10597,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10602,"byte_end":10617,"line_start":288,"line_end":288,"column_start":5,"column_end":20}},{"value":"/     let a = [0.25, -0.8, -0.5];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10622,"byte_end":10657,"line_start":289,"line_end":289,"column_start":5,"column_end":40}},{"value":"/     let b = [0.2, 0.5, 0.8];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10662,"byte_end":10694,"line_start":290,"line_end":290,"column_start":5,"column_end":37}},{"value":"/     let a_signal = signal::from_iter(a.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10699,"byte_end":10759,"line_start":291,"line_end":291,"column_start":5,"column_end":65}},{"value":"/     let b_signal = signal::from_iter(b.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10764,"byte_end":10824,"line_start":292,"line_end":292,"column_start":5,"column_end":65}},{"value":"/     let added: Vec<_> = a_signal.mul_amp(b_signal).take(3).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10829,"byte_end":10902,"line_start":293,"line_end":293,"column_start":5,"column_end":78}},{"value":"/     assert_eq!(added, vec![0.05, -0.4, -0.4]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10907,"byte_end":10957,"line_start":294,"line_end":294,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10962,"byte_end":10967,"line_start":295,"line_end":295,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10972,"byte_end":10979,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":10984,"byte_end":10993,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11913,"byte_end":11923,"line_start":326,"line_end":326,"column_start":8,"column_end":18},"name":"offset_amp","qualname":"::Signal::offset_amp","value":"fn (self, offset: <<Self::Frame as Frame>::Sample as Sample>::Signed) -> OffsetAmp<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Provides an iterator that offsets the amplitude of every channel in each frame of the\n signal by some sample value and yields the resulting frames.","sig":null,"attributes":[{"value":"/ Provides an iterator that offsets the amplitude of every channel in each frame of the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11322,"byte_end":11411,"line_start":310,"line_end":310,"column_start":5,"column_end":94}},{"value":"/ signal by some sample value and yields the resulting frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11416,"byte_end":11480,"line_start":311,"line_end":311,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11485,"byte_end":11488,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11493,"byte_end":11506,"line_start":313,"line_end":313,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11511,"byte_end":11514,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11519,"byte_end":11530,"line_start":315,"line_end":315,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11535,"byte_end":11581,"line_start":316,"line_end":316,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11586,"byte_end":11589,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11594,"byte_end":11609,"line_start":318,"line_end":318,"column_start":5,"column_end":20}},{"value":"/     let frames = [[0.25, 0.4], [-0.2, -0.5]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11614,"byte_end":11663,"line_start":319,"line_end":319,"column_start":5,"column_end":54}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11668,"byte_end":11731,"line_start":320,"line_end":320,"column_start":5,"column_end":68}},{"value":"/     let offset: Vec<_> = signal.offset_amp(0.5).take(2).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11736,"byte_end":11806,"line_start":321,"line_end":321,"column_start":5,"column_end":75}},{"value":"/     assert_eq!(offset, vec![[0.75, 0.9], [0.3, 0.0]]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11811,"byte_end":11869,"line_start":322,"line_end":322,"column_start":5,"column_end":63}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11874,"byte_end":11879,"line_start":323,"line_end":323,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11884,"byte_end":11891,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":11896,"byte_end":11905,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12737,"byte_end":12746,"line_start":355,"line_end":355,"column_start":8,"column_end":17},"name":"scale_amp","qualname":"::Signal::scale_amp","value":"fn (self, amp: <<Self::Frame as Frame>::Sample as Sample>::Float) -> ScaleAmp<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Produces an `Iterator` that scales the amplitude of the sample of each channel in every\n `Frame` yielded by `self` by the given amplitude.","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that scales the amplitude of the sample of each channel in every","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12164,"byte_end":12255,"line_start":339,"line_end":339,"column_start":5,"column_end":96}},{"value":"/ `Frame` yielded by `self` by the given amplitude.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12260,"byte_end":12313,"line_start":340,"line_end":340,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12318,"byte_end":12321,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12326,"byte_end":12339,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12344,"byte_end":12347,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12352,"byte_end":12363,"line_start":344,"line_end":344,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12368,"byte_end":12414,"line_start":345,"line_end":345,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12419,"byte_end":12422,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12427,"byte_end":12442,"line_start":347,"line_end":347,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.2, -0.5, -0.4, 0.3];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12447,"byte_end":12491,"line_start":348,"line_end":348,"column_start":5,"column_end":49}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12496,"byte_end":12559,"line_start":349,"line_end":349,"column_start":5,"column_end":68}},{"value":"/     let scaled: Vec<_> = signal.scale_amp(2.0).take(4).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12564,"byte_end":12633,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"/     assert_eq!(scaled, vec![0.4, -1.0, -0.8, 0.6]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12638,"byte_end":12693,"line_start":351,"line_end":351,"column_start":5,"column_end":60}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12698,"byte_end":12703,"line_start":352,"line_end":352,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12708,"byte_end":12715,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12720,"byte_end":12729,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13566,"byte_end":13588,"line_start":381,"line_end":381,"column_start":8,"column_end":30},"name":"offset_amp_per_channel","qualname":"::Signal::offset_amp_per_channel","value":"fn <F> (self, amp_frame: F) -> OffsetAmpPerChannel<Self, F>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Produces a new `Signal` that offsets the amplitude of every `Frame` in `self` by the\n respective amplitudes in each channel of the given `amp_frame`.","sig":null,"attributes":[{"value":"/ Produces a new `Signal` that offsets the amplitude of every `Frame` in `self` by the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":12952,"byte_end":13040,"line_start":365,"line_end":365,"column_start":5,"column_end":93}},{"value":"/ respective amplitudes in each channel of the given `amp_frame`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13045,"byte_end":13112,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13117,"byte_end":13120,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13125,"byte_end":13138,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13143,"byte_end":13146,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13151,"byte_end":13162,"line_start":370,"line_end":370,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13167,"byte_end":13213,"line_start":371,"line_end":371,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13218,"byte_end":13221,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13226,"byte_end":13241,"line_start":373,"line_end":373,"column_start":5,"column_end":20}},{"value":"/     let frames = [[0.5, 0.3], [-0.25, 0.9]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13246,"byte_end":13294,"line_start":374,"line_end":374,"column_start":5,"column_end":53}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13299,"byte_end":13362,"line_start":375,"line_end":375,"column_start":5,"column_end":68}},{"value":"/     let offset: Vec<_> = signal.offset_amp_per_channel([0.25, -0.5]).take(2).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13367,"byte_end":13458,"line_start":376,"line_end":376,"column_start":5,"column_end":96}},{"value":"/     assert_eq!(offset, vec![[0.75, -0.2], [0.0, 0.4]]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13463,"byte_end":13522,"line_start":377,"line_end":377,"column_start":5,"column_end":64}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13527,"byte_end":13532,"line_start":378,"line_end":378,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13537,"byte_end":13544,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13549,"byte_end":13558,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14567,"byte_end":14588,"line_start":411,"line_end":411,"column_start":8,"column_end":29},"name":"scale_amp_per_channel","qualname":"::Signal::scale_amp_per_channel","value":"fn <F> (self, amp_frame: F) -> ScaleAmpPerChannel<Self, F>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Produces a new `Signal` that scales the amplitude of every `Frame` in `self` by the\n respective amplitudes in each channel of the given `amp_frame`.","sig":null,"attributes":[{"value":"/ Produces a new `Signal` that scales the amplitude of every `Frame` in `self` by the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":13957,"byte_end":14044,"line_start":395,"line_end":395,"column_start":5,"column_end":92}},{"value":"/ respective amplitudes in each channel of the given `amp_frame`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14049,"byte_end":14116,"line_start":396,"line_end":396,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14121,"byte_end":14124,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14129,"byte_end":14142,"line_start":398,"line_end":398,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14147,"byte_end":14150,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14155,"byte_end":14166,"line_start":400,"line_end":400,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14171,"byte_end":14217,"line_start":401,"line_end":401,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14222,"byte_end":14225,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14230,"byte_end":14245,"line_start":403,"line_end":403,"column_start":5,"column_end":20}},{"value":"/     let frames = [[0.2, -0.5], [-0.4, 0.3]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14250,"byte_end":14298,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14303,"byte_end":14366,"line_start":405,"line_end":405,"column_start":5,"column_end":68}},{"value":"/     let scaled: Vec<_> = signal.scale_amp_per_channel([0.5, 2.0]).take(2).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14371,"byte_end":14459,"line_start":406,"line_end":406,"column_start":5,"column_end":93}},{"value":"/     assert_eq!(scaled, vec![[0.1, -1.0], [-0.2, 0.6]]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14464,"byte_end":14523,"line_start":407,"line_end":407,"column_start":5,"column_end":64}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14528,"byte_end":14533,"line_start":408,"line_end":408,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14538,"byte_end":14545,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14550,"byte_end":14559,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15906,"byte_end":15912,"line_start":448,"line_end":448,"column_start":8,"column_end":14},"name":"mul_hz","qualname":"::Signal::mul_hz","value":"fn <M, I> (self, interpolator: I, mul_per_frame: M) -> MulHz<Self, M, I>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Multiplies the rate at which frames of `self` are yielded by the given `signal`.","sig":null,"attributes":[{"value":"/ Multiplies the rate at which frames of `self` are yielded by the given `signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":14954,"byte_end":15038,"line_start":425,"line_end":425,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15043,"byte_end":15046,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This happens by wrapping `self` in a `rate::Converter` and calling `set_playback_hz_scale`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15051,"byte_end":15145,"line_start":427,"line_end":427,"column_start":5,"column_end":99}},{"value":"/ with each value yielded by `signal`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15150,"byte_end":15189,"line_start":428,"line_end":428,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15194,"byte_end":15197,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15202,"byte_end":15215,"line_start":430,"line_end":430,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15220,"byte_end":15223,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15228,"byte_end":15239,"line_start":432,"line_end":432,"column_start":5,"column_end":16}},{"value":"/ use dasp_interpolate::linear::Linear;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15244,"byte_end":15285,"line_start":433,"line_end":433,"column_start":5,"column_end":46}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15290,"byte_end":15336,"line_start":434,"line_end":434,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15341,"byte_end":15344,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15349,"byte_end":15364,"line_start":436,"line_end":436,"column_start":5,"column_end":20}},{"value":"/     let foo = [0.0, 1.0, 0.0, -1.0];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15369,"byte_end":15409,"line_start":437,"line_end":437,"column_start":5,"column_end":45}},{"value":"/     let mul = [1.0, 1.0, 0.5, 0.5, 0.5, 0.5];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15414,"byte_end":15463,"line_start":438,"line_end":438,"column_start":5,"column_end":54}},{"value":"/     let mut source = signal::from_iter(foo.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15468,"byte_end":15532,"line_start":439,"line_end":439,"column_start":5,"column_end":69}},{"value":"/     let a = source.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15537,"byte_end":15567,"line_start":440,"line_end":440,"column_start":5,"column_end":35}},{"value":"/     let b = source.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15572,"byte_end":15602,"line_start":441,"line_end":441,"column_start":5,"column_end":35}},{"value":"/     let interp = Linear::new(a, b);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15607,"byte_end":15646,"line_start":442,"line_end":442,"column_start":5,"column_end":44}},{"value":"/     let hz_signal = signal::from_iter(mul.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15651,"byte_end":15714,"line_start":443,"line_end":443,"column_start":5,"column_end":68}},{"value":"/     let frames: Vec<_> = source.mul_hz(interp, hz_signal).take(6).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15719,"byte_end":15799,"line_start":444,"line_end":444,"column_start":5,"column_end":85}},{"value":"/     assert_eq!(&frames[..], &[0.0, 1.0, 0.0, -0.5, -1.0, -0.5][..]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15804,"byte_end":15876,"line_start":445,"line_end":445,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15881,"byte_end":15886,"line_start":446,"line_end":446,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":15891,"byte_end":15898,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16926,"byte_end":16939,"line_start":478,"line_end":478,"column_start":8,"column_end":21},"name":"from_hz_to_hz","qualname":"::Signal::from_hz_to_hz","value":"fn <I> (self, interpolator: I, source_hz: f64, target_hz: f64) -> Converter<Self, I>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Converts the rate at which frames of the `Signal` are yielded using interpolation.","sig":null,"attributes":[{"value":"/ Converts the rate at which frames of the `Signal` are yielded using interpolation.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16229,"byte_end":16315,"line_start":460,"line_end":460,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16320,"byte_end":16323,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16328,"byte_end":16341,"line_start":462,"line_end":462,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16346,"byte_end":16349,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16354,"byte_end":16365,"line_start":464,"line_end":464,"column_start":5,"column_end":16}},{"value":"/ use dasp_interpolate::linear::Linear;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16370,"byte_end":16411,"line_start":465,"line_end":465,"column_start":5,"column_end":46}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16416,"byte_end":16462,"line_start":466,"line_end":466,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16467,"byte_end":16470,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16475,"byte_end":16490,"line_start":468,"line_end":468,"column_start":5,"column_end":20}},{"value":"/     let foo = [0.0, 1.0, 0.0, -1.0];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16495,"byte_end":16535,"line_start":469,"line_end":469,"column_start":5,"column_end":45}},{"value":"/     let mut source = signal::from_iter(foo.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16540,"byte_end":16604,"line_start":470,"line_end":470,"column_start":5,"column_end":69}},{"value":"/     let a = source.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16609,"byte_end":16639,"line_start":471,"line_end":471,"column_start":5,"column_end":35}},{"value":"/     let b = source.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16644,"byte_end":16674,"line_start":472,"line_end":472,"column_start":5,"column_end":35}},{"value":"/     let interp = Linear::new(a, b);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16679,"byte_end":16718,"line_start":473,"line_end":473,"column_start":5,"column_end":44}},{"value":"/     let frames: Vec<_> = source.from_hz_to_hz(interp, 1.0, 2.0).take(8).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16723,"byte_end":16809,"line_start":474,"line_end":474,"column_start":5,"column_end":91}},{"value":"/     assert_eq!(&frames[..], &[0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5][..]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16814,"byte_end":16896,"line_start":475,"line_end":475,"column_start":5,"column_end":87}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16901,"byte_end":16906,"line_start":476,"line_end":476,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":16911,"byte_end":16918,"line_start":477,"line_end":477,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17856,"byte_end":17864,"line_start":504,"line_end":504,"column_start":8,"column_end":16},"name":"scale_hz","qualname":"::Signal::scale_hz","value":"fn <I> (self, interpolator: I, multi: f64) -> Converter<Self, I>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Multiplies the rate at which frames of the `Signal` are yielded by the given value.","sig":null,"attributes":[{"value":"/ Multiplies the rate at which frames of the `Signal` are yielded by the given value.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17168,"byte_end":17255,"line_start":486,"line_end":486,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17260,"byte_end":17263,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17268,"byte_end":17281,"line_start":488,"line_end":488,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17286,"byte_end":17289,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17294,"byte_end":17305,"line_start":490,"line_end":490,"column_start":5,"column_end":16}},{"value":"/ use dasp_interpolate::linear::Linear;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17310,"byte_end":17351,"line_start":491,"line_end":491,"column_start":5,"column_end":46}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17356,"byte_end":17402,"line_start":492,"line_end":492,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17407,"byte_end":17410,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17415,"byte_end":17430,"line_start":494,"line_end":494,"column_start":5,"column_end":20}},{"value":"/     let foo = [0.0, 1.0, 0.0, -1.0];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17435,"byte_end":17475,"line_start":495,"line_end":495,"column_start":5,"column_end":45}},{"value":"/     let mut source = signal::from_iter(foo.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17480,"byte_end":17544,"line_start":496,"line_end":496,"column_start":5,"column_end":69}},{"value":"/     let a = source.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17549,"byte_end":17579,"line_start":497,"line_end":497,"column_start":5,"column_end":35}},{"value":"/     let b = source.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17584,"byte_end":17614,"line_start":498,"line_end":498,"column_start":5,"column_end":35}},{"value":"/     let interp = Linear::new(a, b);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17619,"byte_end":17658,"line_start":499,"line_end":499,"column_start":5,"column_end":44}},{"value":"/     let frames: Vec<_> = source.scale_hz(interp, 0.5).take(8).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17663,"byte_end":17739,"line_start":500,"line_end":500,"column_start":5,"column_end":81}},{"value":"/     assert_eq!(&frames[..], &[0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5][..]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17744,"byte_end":17826,"line_start":501,"line_end":501,"column_start":5,"column_end":87}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17831,"byte_end":17836,"line_start":502,"line_end":502,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":17841,"byte_end":17848,"line_start":503,"line_end":503,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18654,"byte_end":18659,"line_start":529,"line_end":529,"column_start":8,"column_end":13},"name":"delay","qualname":"::Signal::delay","value":"fn (self, n_frames: usize) -> Delay<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Delays the `Signal` by the given number of frames.","sig":null,"attributes":[{"value":"/ Delays the `Signal` by the given number of frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18062,"byte_end":18116,"line_start":512,"line_end":512,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18121,"byte_end":18124,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ The delay is performed by yielding `Frame::EQUILIBRIUM` `n_frames` times before","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18129,"byte_end":18212,"line_start":514,"line_end":514,"column_start":5,"column_end":88}},{"value":"/ continuing to yield frames from `signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18217,"byte_end":18262,"line_start":515,"line_end":515,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18267,"byte_end":18270,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18275,"byte_end":18288,"line_start":517,"line_end":517,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18293,"byte_end":18296,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18301,"byte_end":18312,"line_start":519,"line_end":519,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18317,"byte_end":18363,"line_start":520,"line_end":520,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18368,"byte_end":18371,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18376,"byte_end":18391,"line_start":522,"line_end":522,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.2, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18396,"byte_end":18428,"line_start":523,"line_end":523,"column_start":5,"column_end":37}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18433,"byte_end":18496,"line_start":524,"line_end":524,"column_start":5,"column_end":68}},{"value":"/     let delayed: Vec<_> = signal.delay(2).take(4).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18501,"byte_end":18565,"line_start":525,"line_end":525,"column_start":5,"column_end":69}},{"value":"/     assert_eq!(delayed, vec![0.0, 0.0, 0.2, 0.4]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18570,"byte_end":18624,"line_start":526,"line_end":526,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18629,"byte_end":18634,"line_start":527,"line_end":527,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18639,"byte_end":18646,"line_start":528,"line_end":528,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19375,"byte_end":19399,"line_start":554,"line_end":554,"column_start":8,"column_end":32},"name":"into_interleaved_samples","qualname":"::Signal::into_interleaved_samples","value":"fn (mut self) -> IntoInterleavedSamples<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Converts a `Signal` into a type that yields the interleaved `Sample`s.","sig":null,"attributes":[{"value":"/ Converts a `Signal` into a type that yields the interleaved `Sample`s.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18830,"byte_end":18904,"line_start":539,"line_end":539,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18909,"byte_end":18912,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18917,"byte_end":18930,"line_start":541,"line_end":541,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18935,"byte_end":18938,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18943,"byte_end":18954,"line_start":543,"line_end":543,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":18959,"byte_end":19005,"line_start":544,"line_end":544,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19010,"byte_end":19013,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19018,"byte_end":19033,"line_start":546,"line_end":546,"column_start":5,"column_end":20}},{"value":"/     let frames = [[0.1, 0.2], [0.3, 0.4]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19038,"byte_end":19084,"line_start":547,"line_end":547,"column_start":5,"column_end":51}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19089,"byte_end":19152,"line_start":548,"line_end":548,"column_start":5,"column_end":68}},{"value":"/     let samples = signal.into_interleaved_samples();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19157,"byte_end":19213,"line_start":549,"line_end":549,"column_start":5,"column_end":61}},{"value":"/     let samples: Vec<_> = samples.into_iter().take(4).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19218,"byte_end":19286,"line_start":550,"line_end":550,"column_start":5,"column_end":73}},{"value":"/     assert_eq!(samples, vec![0.1, 0.2, 0.3, 0.4]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19291,"byte_end":19345,"line_start":551,"line_end":551,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19350,"byte_end":19355,"line_start":552,"line_end":552,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19360,"byte_end":19367,"line_start":553,"line_end":553,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20171,"byte_end":20179,"line_start":580,"line_end":580,"column_start":8,"column_end":16},"name":"clip_amp","qualname":"::Signal::clip_amp","value":"fn (self, thresh: <<Self::Frame as Frame>::Sample as Sample>::Signed) -> ClipAmp<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Clips the amplitude of each channel in each `Frame` yielded by `self` to the given\n threshold amplitude.","sig":null,"attributes":[{"value":"/ Clips the amplitude of each channel in each `Frame` yielded by `self` to the given","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19637,"byte_end":19723,"line_start":565,"line_end":565,"column_start":5,"column_end":91}},{"value":"/ threshold amplitude.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19728,"byte_end":19752,"line_start":566,"line_end":566,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19757,"byte_end":19760,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19765,"byte_end":19778,"line_start":568,"line_end":568,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19783,"byte_end":19786,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19791,"byte_end":19802,"line_start":570,"line_end":570,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19807,"byte_end":19853,"line_start":571,"line_end":571,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19858,"byte_end":19861,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19866,"byte_end":19881,"line_start":573,"line_end":573,"column_start":5,"column_end":20}},{"value":"/     let frames = [[1.2, 0.8], [-0.7, -1.4]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19886,"byte_end":19934,"line_start":574,"line_end":574,"column_start":5,"column_end":53}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":19939,"byte_end":20002,"line_start":575,"line_end":575,"column_start":5,"column_end":68}},{"value":"/     let clipped: Vec<_> = signal.clip_amp(0.9).take(2).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20007,"byte_end":20076,"line_start":576,"line_end":576,"column_start":5,"column_end":74}},{"value":"/     assert_eq!(clipped, vec![[0.9, 0.8], [-0.7, -0.9]]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20081,"byte_end":20141,"line_start":577,"line_end":577,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20146,"byte_end":20151,"line_start":578,"line_end":578,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20156,"byte_end":20163,"line_start":579,"line_end":579,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20989,"byte_end":20996,"line_start":611,"line_end":611,"column_start":8,"column_end":15},"name":"inspect","qualname":"::Signal::inspect","value":"fn <F> (self, inspect: F) -> Inspect<Self, F>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Create a new `Signal` that calls the enclosing function on each iteration.","sig":null,"attributes":[{"value":"/ Create a new `Signal` that calls the enclosing function on each iteration.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20393,"byte_end":20471,"line_start":590,"line_end":590,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20476,"byte_end":20479,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20484,"byte_end":20497,"line_start":592,"line_end":592,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20502,"byte_end":20505,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20510,"byte_end":20521,"line_start":594,"line_end":594,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20526,"byte_end":20572,"line_start":595,"line_end":595,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20577,"byte_end":20580,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20585,"byte_end":20600,"line_start":597,"line_end":597,"column_start":5,"column_end":20}},{"value":"/     let mut f = 0.0;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20605,"byte_end":20629,"line_start":598,"line_end":598,"column_start":5,"column_end":29}},{"value":"/     let mut signal = signal::gen_mut(move || {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20634,"byte_end":20684,"line_start":599,"line_end":599,"column_start":5,"column_end":55}},{"value":"/         f += 0.1;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20689,"byte_end":20710,"line_start":600,"line_end":600,"column_start":5,"column_end":26}},{"value":"/         f","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20715,"byte_end":20728,"line_start":601,"line_end":601,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20733,"byte_end":20744,"line_start":602,"line_end":602,"column_start":5,"column_end":16}},{"value":"/     let func = |x: &f64| {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20749,"byte_end":20779,"line_start":603,"line_end":603,"column_start":5,"column_end":35}},{"value":"/         assert_eq!(*x, 0.1);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20784,"byte_end":20816,"line_start":604,"line_end":604,"column_start":5,"column_end":37}},{"value":"/     };","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20821,"byte_end":20831,"line_start":605,"line_end":605,"column_start":5,"column_end":15}},{"value":"/     let mut inspected = signal.inspect(func);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20836,"byte_end":20885,"line_start":606,"line_end":606,"column_start":5,"column_end":54}},{"value":"/     let out = inspected.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20890,"byte_end":20925,"line_start":607,"line_end":607,"column_start":5,"column_end":40}},{"value":"/     assert_eq!(out, 0.1);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20930,"byte_end":20959,"line_start":608,"line_end":608,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20964,"byte_end":20969,"line_start":609,"line_end":609,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":20974,"byte_end":20981,"line_start":610,"line_end":610,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23528,"byte_end":23532,"line_start":672,"line_end":672,"column_start":8,"column_end":12},"name":"fork","qualname":"::Signal::fork","value":"fn <S> (self, ring_buffer: ring_buffer::Bounded<S>) -> Fork<Self, S>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Forks `Self` into two signals that produce the same frames.","sig":null,"attributes":[{"value":"/ Forks `Self` into two signals that produce the same frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21202,"byte_end":21265,"line_start":622,"line_end":622,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21270,"byte_end":21273,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ The given `ring_buffer` must be empty to ensure correct behaviour.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21278,"byte_end":21348,"line_start":624,"line_end":624,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21353,"byte_end":21356,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Each time a frame is requested from the signal on one branch, that frame will be pushed to","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21361,"byte_end":21455,"line_start":626,"line_end":626,"column_start":5,"column_end":99}},{"value":"/ the given `ring_buffer` of pending frames to be collected by the other branch and a flag","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21460,"byte_end":21552,"line_start":627,"line_end":627,"column_start":5,"column_end":97}},{"value":"/ will be set to indicate that there are pending frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21557,"byte_end":21615,"line_start":628,"line_end":628,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21620,"byte_end":21623,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ **Fork** can be used to share the queue between the two branches by reference","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21628,"byte_end":21709,"line_start":630,"line_end":630,"column_start":5,"column_end":86}},{"value":"/ `fork.by_ref()` or via a reference counted pointer `fork.by_rc()`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21714,"byte_end":21784,"line_start":631,"line_end":631,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21789,"byte_end":21792,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ **Fork** is a slightly more efficient alternative to **Bus** when only two branches are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21797,"byte_end":21888,"line_start":633,"line_end":633,"column_start":5,"column_end":96}},{"value":"/ required.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21893,"byte_end":21906,"line_start":634,"line_end":634,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21911,"byte_end":21914,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ **Note:** It is up to the user to ensure that there are never more than","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21919,"byte_end":21994,"line_start":636,"line_end":636,"column_start":5,"column_end":80}},{"value":"/ `ring_buffer.max_len()` pending frames - otherwise the oldest frames will be overridden and","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":21999,"byte_end":22094,"line_start":637,"line_end":637,"column_start":5,"column_end":100}},{"value":"/ glitching may occur on the lagging branch.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22099,"byte_end":22145,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22150,"byte_end":22153,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ **Panic!**s if the given `ring_buffer` is not empty in order to guarantee correct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22158,"byte_end":22243,"line_start":640,"line_end":640,"column_start":5,"column_end":90}},{"value":"/ behaviour.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22248,"byte_end":22262,"line_start":641,"line_end":641,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22267,"byte_end":22270,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22275,"byte_end":22282,"line_start":643,"line_end":643,"column_start":5,"column_end":12}},{"value":"/ use dasp_ring_buffer as ring_buffer;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22287,"byte_end":22327,"line_start":644,"line_end":644,"column_start":5,"column_end":45}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22332,"byte_end":22378,"line_start":645,"line_end":645,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22383,"byte_end":22386,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22391,"byte_end":22406,"line_start":647,"line_end":647,"column_start":5,"column_end":20}},{"value":"/     let signal = signal::rate(44_100.0).const_hz(440.0).sine();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22411,"byte_end":22478,"line_start":648,"line_end":648,"column_start":5,"column_end":72}},{"value":"/     let ring_buffer = ring_buffer::Bounded::from([0f64; 64]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22483,"byte_end":22548,"line_start":649,"line_end":649,"column_start":5,"column_end":70}},{"value":"/     let mut fork = signal.fork(ring_buffer);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22553,"byte_end":22601,"line_start":650,"line_end":650,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22606,"byte_end":22609,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/     // Forks can be split into their branches via reference.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22614,"byte_end":22678,"line_start":652,"line_end":652,"column_start":5,"column_end":69}},{"value":"/     {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22683,"byte_end":22692,"line_start":653,"line_end":653,"column_start":5,"column_end":14}},{"value":"/         let (mut a, mut b) = fork.by_ref();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22697,"byte_end":22744,"line_start":654,"line_end":654,"column_start":5,"column_end":52}},{"value":"/         assert_eq!(a.next(), b.next());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22749,"byte_end":22792,"line_start":655,"line_end":655,"column_start":5,"column_end":48}},{"value":"/         assert_eq!(a.by_ref().take(64).collect::<Vec<_>>(),","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22797,"byte_end":22860,"line_start":656,"line_end":656,"column_start":5,"column_end":68}},{"value":"/                    b.by_ref().take(64).collect::<Vec<_>>());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22865,"byte_end":22929,"line_start":657,"line_end":657,"column_start":5,"column_end":69}},{"value":"/     }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22934,"byte_end":22943,"line_start":658,"line_end":658,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22948,"byte_end":22951,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/     // Forks can also be split via reference counted pointer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":22956,"byte_end":23021,"line_start":660,"line_end":660,"column_start":5,"column_end":70}},{"value":"/     let (mut a, mut b) = fork.by_rc();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23026,"byte_end":23068,"line_start":661,"line_end":661,"column_start":5,"column_end":47}},{"value":"/     assert_eq!(a.next(), b.next());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23073,"byte_end":23112,"line_start":662,"line_end":662,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(a.by_ref().take(64).collect::<Vec<_>>(),","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23117,"byte_end":23176,"line_start":663,"line_end":663,"column_start":5,"column_end":64}},{"value":"/                b.by_ref().take(64).collect::<Vec<_>>());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23181,"byte_end":23241,"line_start":664,"line_end":664,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23246,"byte_end":23249,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/     // The lagging branch will be missing frames if we exceed `ring_buffer.max_len()`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23254,"byte_end":23343,"line_start":666,"line_end":666,"column_start":5,"column_end":94}},{"value":"/     // pending frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23348,"byte_end":23374,"line_start":667,"line_end":667,"column_start":5,"column_end":31}},{"value":"/     assert!(a.by_ref().take(67).collect::<Vec<_>>() !=","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23379,"byte_end":23437,"line_start":668,"line_end":668,"column_start":5,"column_end":63}},{"value":"/             b.by_ref().take(67).collect::<Vec<_>>())","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23442,"byte_end":23498,"line_start":669,"line_end":669,"column_start":5,"column_end":61}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23503,"byte_end":23508,"line_start":670,"line_end":670,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23513,"byte_end":23520,"line_start":671,"line_end":671,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24514,"byte_end":24518,"line_start":704,"line_end":704,"column_start":8,"column_end":12},"name":"take","qualname":"::Signal::take","value":"fn (self, n: usize) -> Take<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Converts the `Signal` into an `Iterator` that will yield the given number for `Frame`s\n before returning `None`.","sig":null,"attributes":[{"value":"/ Converts the `Signal` into an `Iterator` that will yield the given number for `Frame`s","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":23960,"byte_end":24050,"line_start":688,"line_end":688,"column_start":5,"column_end":95}},{"value":"/ before returning `None`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24055,"byte_end":24083,"line_start":689,"line_end":689,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24088,"byte_end":24091,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24096,"byte_end":24109,"line_start":691,"line_end":691,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24114,"byte_end":24117,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24122,"byte_end":24133,"line_start":693,"line_end":693,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24138,"byte_end":24184,"line_start":694,"line_end":694,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24189,"byte_end":24192,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24197,"byte_end":24212,"line_start":696,"line_end":696,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.1, 0.2, 0.3, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24217,"byte_end":24259,"line_start":697,"line_end":697,"column_start":5,"column_end":47}},{"value":"/     let mut signal = signal::from_iter(frames.iter().cloned()).take(2);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24264,"byte_end":24339,"line_start":698,"line_end":698,"column_start":5,"column_end":80}},{"value":"/     assert_eq!(signal.next(), Some(0.1));","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24344,"byte_end":24389,"line_start":699,"line_end":699,"column_start":5,"column_end":50}},{"value":"/     assert_eq!(signal.next(), Some(0.2));","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24394,"byte_end":24439,"line_start":700,"line_end":700,"column_start":5,"column_end":50}},{"value":"/     assert_eq!(signal.next(), None);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24444,"byte_end":24484,"line_start":701,"line_end":701,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24489,"byte_end":24494,"line_start":702,"line_end":702,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24499,"byte_end":24506,"line_start":703,"line_end":703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25068,"byte_end":25083,"line_start":725,"line_end":725,"column_start":8,"column_end":23},"name":"until_exhausted","qualname":"::Signal::until_exhausted","value":"fn (self) -> UntilExhausted<Self>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Converts the `Signal` into an `Iterator` yielding frames until the `signal.is_exhausted()`\n returns `true`.","sig":null,"attributes":[{"value":"/ Converts the `Signal` into an `Iterator` yielding frames until the `signal.is_exhausted()`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24633,"byte_end":24727,"line_start":711,"line_end":711,"column_start":5,"column_end":99}},{"value":"/ returns `true`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24732,"byte_end":24751,"line_start":712,"line_end":712,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24756,"byte_end":24759,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24764,"byte_end":24777,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24782,"byte_end":24785,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24790,"byte_end":24797,"line_start":716,"line_end":716,"column_start":5,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24802,"byte_end":24848,"line_start":717,"line_end":717,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24853,"byte_end":24856,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24861,"byte_end":24876,"line_start":719,"line_end":719,"column_start":5,"column_end":20}},{"value":"/     let frames = [1, 2];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24881,"byte_end":24909,"line_start":720,"line_end":720,"column_start":5,"column_end":33}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24914,"byte_end":24977,"line_start":721,"line_end":721,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(signal.until_exhausted().count(), 2);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":24982,"byte_end":25038,"line_start":722,"line_end":722,"column_start":5,"column_end":61}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25043,"byte_end":25048,"line_start":723,"line_end":723,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25053,"byte_end":25060,"line_start":724,"line_end":724,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27213,"byte_end":27221,"line_start":776,"line_end":776,"column_start":8,"column_end":16},"name":"buffered","qualname":"::Signal::buffered","value":"fn <S> (self, ring_buffer: ring_buffer::Bounded<S>) -> Buffered<Self, S>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Buffers the signal using the given ring buffer.","sig":null,"attributes":[{"value":"/ Buffers the signal using the given ring buffer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25202,"byte_end":25253,"line_start":732,"line_end":732,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25258,"byte_end":25261,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ When `next` is called on the returned signal, it will first check if the ring buffer is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25266,"byte_end":25357,"line_start":734,"line_end":734,"column_start":5,"column_end":96}},{"value":"/ empty. If so, it will completely fill the ring buffer with the inner signal before yielding","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25362,"byte_end":25457,"line_start":735,"line_end":735,"column_start":5,"column_end":100}},{"value":"/ the next value. If the ring buffer still contains un-yielded values, the next frame will be","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25462,"byte_end":25557,"line_start":736,"line_end":736,"column_start":5,"column_end":100}},{"value":"/ popped from the front of the ring buffer and immediately returned.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25562,"byte_end":25632,"line_start":737,"line_end":737,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25637,"byte_end":25640,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25645,"byte_end":25652,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ use dasp_ring_buffer as ring_buffer;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25657,"byte_end":25697,"line_start":740,"line_end":740,"column_start":5,"column_end":45}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25702,"byte_end":25748,"line_start":741,"line_end":741,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25753,"byte_end":25756,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25761,"byte_end":25776,"line_start":743,"line_end":743,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.1, 0.2, 0.3, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25781,"byte_end":25823,"line_start":744,"line_end":744,"column_start":5,"column_end":47}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25828,"byte_end":25891,"line_start":745,"line_end":745,"column_start":5,"column_end":68}},{"value":"/     let ring_buffer = ring_buffer::Bounded::from([0f32; 2]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25896,"byte_end":25960,"line_start":746,"line_end":746,"column_start":5,"column_end":69}},{"value":"/     let mut buffered_signal = signal.buffered(ring_buffer);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":25965,"byte_end":26028,"line_start":747,"line_end":747,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(buffered_signal.next(), 0.1);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26033,"byte_end":26081,"line_start":748,"line_end":748,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.2);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26086,"byte_end":26134,"line_start":749,"line_end":749,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.3);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26139,"byte_end":26187,"line_start":750,"line_end":750,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.4);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26192,"byte_end":26240,"line_start":751,"line_end":751,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26245,"byte_end":26293,"line_start":752,"line_end":752,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26298,"byte_end":26303,"line_start":753,"line_end":753,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26308,"byte_end":26315,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26320,"byte_end":26323,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ If the given ring buffer already contains frames, those will be yielded first.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26328,"byte_end":26410,"line_start":756,"line_end":756,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26415,"byte_end":26418,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26423,"byte_end":26430,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"/ use dasp_ring_buffer as ring_buffer;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26435,"byte_end":26475,"line_start":759,"line_end":759,"column_start":5,"column_end":45}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26480,"byte_end":26526,"line_start":760,"line_end":760,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26531,"byte_end":26534,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26539,"byte_end":26554,"line_start":762,"line_end":762,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.1, 0.2, 0.3, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26559,"byte_end":26601,"line_start":763,"line_end":763,"column_start":5,"column_end":47}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26606,"byte_end":26669,"line_start":764,"line_end":764,"column_start":5,"column_end":68}},{"value":"/     let ring_buffer = ring_buffer::Bounded::from_full([0.8, 0.9]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26674,"byte_end":26744,"line_start":765,"line_end":765,"column_start":5,"column_end":75}},{"value":"/     let mut buffered_signal = signal.buffered(ring_buffer);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26749,"byte_end":26812,"line_start":766,"line_end":766,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(buffered_signal.next(), 0.8);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26817,"byte_end":26865,"line_start":767,"line_end":767,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.9);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26870,"byte_end":26918,"line_start":768,"line_end":768,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.1);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26923,"byte_end":26971,"line_start":769,"line_end":769,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.2);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":26976,"byte_end":27024,"line_start":770,"line_end":770,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.3);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27029,"byte_end":27077,"line_start":771,"line_end":771,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.4);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27082,"byte_end":27130,"line_start":772,"line_end":772,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(buffered_signal.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27135,"byte_end":27183,"line_start":773,"line_end":773,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27188,"byte_end":27193,"line_start":774,"line_end":774,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27198,"byte_end":27205,"line_start":775,"line_end":775,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28164,"byte_end":28170,"line_start":806,"line_end":806,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::Signal::by_ref","value":"fn (&mut self) -> &mut Self","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Borrows a Signal rather than consuming it.","sig":null,"attributes":[{"value":"/ Borrows a Signal rather than consuming it.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27509,"byte_end":27555,"line_start":787,"line_end":787,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27560,"byte_end":27563,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ This is useful to allow applying signal adaptors while still retaining ownership of the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27568,"byte_end":27659,"line_start":789,"line_end":789,"column_start":5,"column_end":96}},{"value":"/ original signal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27664,"byte_end":27684,"line_start":790,"line_end":790,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27689,"byte_end":27692,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27697,"byte_end":27710,"line_start":792,"line_end":792,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27715,"byte_end":27718,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27723,"byte_end":27734,"line_start":794,"line_end":794,"column_start":5,"column_end":16}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27739,"byte_end":27785,"line_start":795,"line_end":795,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27790,"byte_end":27793,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27798,"byte_end":27813,"line_start":797,"line_end":797,"column_start":5,"column_end":20}},{"value":"/     let frames = [0, 1, 2, 3, 4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27818,"byte_end":27855,"line_start":798,"line_end":798,"column_start":5,"column_end":42}},{"value":"/     let mut signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27860,"byte_end":27927,"line_start":799,"line_end":799,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(signal.next(), 0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27932,"byte_end":27969,"line_start":800,"line_end":800,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(signal.by_ref().take(2).collect::<Vec<_>>(), vec![1, 2]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":27974,"byte_end":28050,"line_start":801,"line_end":801,"column_start":5,"column_end":81}},{"value":"/     assert_eq!(signal.next(), 3);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28055,"byte_end":28092,"line_start":802,"line_end":802,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(signal.next(), 4);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28097,"byte_end":28134,"line_start":803,"line_end":803,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28139,"byte_end":28144,"line_start":804,"line_end":804,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28149,"byte_end":28156,"line_start":805,"line_end":805,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":81},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28919,"byte_end":28923,"line_start":832,"line_end":832,"column_start":8,"column_end":12},"name":"lift","qualname":"::lift","value":"fn <I, F, S> (iter: I, f: F) -> UntilExhausted<S>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the given `Iterator`, converts it to a `Signal`, applies the given function to the\n `Signal` and returns an `Iterator` that will become exhausted when the consumed `Iterator`\n does.","sig":null,"attributes":[{"value":"/ Consumes the given `Iterator`, converts it to a `Signal`, applies the given function to the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28254,"byte_end":28349,"line_start":814,"line_end":814,"column_start":1,"column_end":96}},{"value":"/ `Signal` and returns an `Iterator` that will become exhausted when the consumed `Iterator`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28350,"byte_end":28444,"line_start":815,"line_end":815,"column_start":1,"column_end":95}},{"value":"/ does.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28445,"byte_end":28454,"line_start":816,"line_end":816,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28455,"byte_end":28458,"line_start":817,"line_end":817,"column_start":1,"column_end":4}},{"value":"/ This is particularly useful when you want to apply `Signal` methods to an `Iterator` yielding","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28459,"byte_end":28556,"line_start":818,"line_end":818,"column_start":1,"column_end":98}},{"value":"/ `Frame`s and return an `Iterator` as a result.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28557,"byte_end":28607,"line_start":819,"line_end":819,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28608,"byte_end":28611,"line_start":820,"line_end":820,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28612,"byte_end":28625,"line_start":821,"line_end":821,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28626,"byte_end":28629,"line_start":822,"line_end":822,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28630,"byte_end":28637,"line_start":823,"line_end":823,"column_start":1,"column_end":8}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28638,"byte_end":28684,"line_start":824,"line_end":824,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28685,"byte_end":28688,"line_start":825,"line_end":825,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28689,"byte_end":28704,"line_start":826,"line_end":826,"column_start":1,"column_end":16}},{"value":"/     let frames = vec![0, 1, 2, 3];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28705,"byte_end":28743,"line_start":827,"line_end":827,"column_start":1,"column_end":39}},{"value":"/     let offset_frames = signal::lift(frames, |signal| signal.offset_amp(2));","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28744,"byte_end":28824,"line_start":828,"line_end":828,"column_start":1,"column_end":81}},{"value":"/     assert_eq!(offset_frames.collect::<Vec<_>>(), vec![2, 3, 4, 5]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28825,"byte_end":28897,"line_start":829,"line_end":829,"column_start":1,"column_end":73}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28898,"byte_end":28903,"line_start":830,"line_end":830,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":28904,"byte_end":28911,"line_start":831,"line_end":831,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29355,"byte_end":29366,"line_start":849,"line_end":849,"column_start":12,"column_end":23},"name":"Equilibrium","qualname":"::Equilibrium","value":"Equilibrium {  }","parent":null,"children":[{"krate":0,"index":367}],"decl_id":null,"docs":" An iterator that endlessly yields `Frame`s of type `F` at equilibrium.\n","sig":null,"attributes":[{"value":"/ An iterator that endlessly yields `Frame`s of type `F` at equilibrium.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29252,"byte_end":29326,"line_start":847,"line_end":847,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29505,"byte_end":29508,"line_start":855,"line_end":855,"column_start":12,"column_end":15},"name":"Gen","qualname":"::Gen","value":"Gen {  }","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"decl_id":null,"docs":" A signal that generates frames using the given function.\n","sig":null,"attributes":[{"value":"/ A signal that generates frames using the given function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29416,"byte_end":29476,"line_start":853,"line_end":853,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29690,"byte_end":29696,"line_start":862,"line_end":862,"column_start":12,"column_end":18},"name":"GenMut","qualname":"::GenMut","value":"GenMut {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"decl_id":null,"docs":" A signal that generates frames using the given function which may mutate some state.\n","sig":null,"attributes":[{"value":"/ A signal that generates frames using the given function which may mutate some state.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29573,"byte_end":29661,"line_start":860,"line_end":860,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":389},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29843,"byte_end":29846,"line_start":869,"line_end":869,"column_start":12,"column_end":15},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395}],"decl_id":null,"docs":" A signal that maps from one signal to another\n","sig":null,"attributes":[{"value":"/ A signal that maps from one signal to another","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29765,"byte_end":29814,"line_start":867,"line_end":867,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30136,"byte_end":30142,"line_start":879,"line_end":879,"column_start":12,"column_end":18},"name":"ZipMap","qualname":"::ZipMap","value":"ZipMap {  }","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"decl_id":null,"docs":" A signal that iterates two signals in parallel and combines them with a function.","sig":null,"attributes":[{"value":"/ A signal that iterates two signals in parallel and combines them with a function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":29929,"byte_end":30014,"line_start":875,"line_end":875,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30015,"byte_end":30018,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ `ZipMap::is_exhausted` returns `true` if *either* of the two signals returns `true`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30019,"byte_end":30107,"line_start":877,"line_end":877,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30349,"byte_end":30361,"line_start":888,"line_end":888,"column_start":12,"column_end":24},"name":"FromIterator","qualname":"::FromIterator","value":"FromIterator {  }","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419}],"decl_id":null,"docs":" A type that wraps an Iterator and provides a `Signal` implementation for it.\n","sig":null,"attributes":[{"value":"/ A type that wraps an Iterator and provides a `Signal` implementation for it.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30240,"byte_end":30320,"line_start":886,"line_end":886,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":423},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30544,"byte_end":30574,"line_start":898,"line_end":898,"column_start":12,"column_end":42},"name":"FromInterleavedSamplesIterator","qualname":"::FromInterleavedSamplesIterator","value":"FromInterleavedSamplesIterator {  }","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"decl_id":null,"docs":" An iterator that converts an iterator of `Sample`s to an iterator of `Frame`s.\n","sig":null,"attributes":[{"value":"/ An iterator that converts an iterator of `Sample`s to an iterator of `Frame`s.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30433,"byte_end":30515,"line_start":896,"line_end":896,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30805,"byte_end":30809,"line_start":910,"line_end":910,"column_start":12,"column_end":16},"name":"Rate","qualname":"::Rate","value":"Rate {  }","parent":null,"children":[{"krate":0,"index":433}],"decl_id":null,"docs":" The rate at which phrase a **Signal** is sampled.\n","sig":null,"attributes":[{"value":"/ The rate at which phrase a **Signal** is sampled.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30699,"byte_end":30752,"line_start":908,"line_end":908,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":443},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30888,"byte_end":30895,"line_start":916,"line_end":916,"column_start":12,"column_end":19},"name":"ConstHz","qualname":"::ConstHz","value":"ConstHz {  }","parent":null,"children":[{"krate":0,"index":444}],"decl_id":null,"docs":" A constant phase step size.\n","sig":null,"attributes":[{"value":"/ A constant phase step size.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30828,"byte_end":30859,"line_start":914,"line_end":914,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":447},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30999,"byte_end":31001,"line_start":922,"line_end":922,"column_start":12,"column_end":14},"name":"Hz","qualname":"::Hz","value":"Hz {  }","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450}],"decl_id":null,"docs":" An iterator that yields the step size for a phase.\n","sig":null,"attributes":[{"value":"/ An iterator that yields the step size for a phase.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":30916,"byte_end":30970,"line_start":920,"line_end":920,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31141,"byte_end":31146,"line_start":929,"line_end":929,"column_start":12,"column_end":17},"name":"Phase","qualname":"::Phase","value":"Phase {  }","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457}],"decl_id":null,"docs":" An iterator that yields a phase, useful for waveforms like Sine or Saw.\n","sig":null,"attributes":[{"value":"/ An iterator that yields a phase, useful for waveforms like Sine or Saw.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31037,"byte_end":31112,"line_start":927,"line_end":927,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31245,"byte_end":31249,"line_start":936,"line_end":936,"column_start":12,"column_end":16},"name":"Sine","qualname":"::Sine","value":"Sine {  }","parent":null,"children":[{"krate":0,"index":463}],"decl_id":null,"docs":" A sine wave signal generator.\n","sig":null,"attributes":[{"value":"/ A sine wave signal generator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31183,"byte_end":31216,"line_start":934,"line_end":934,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":467},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31340,"byte_end":31343,"line_start":942,"line_end":942,"column_start":12,"column_end":15},"name":"Saw","qualname":"::Saw","value":"Saw {  }","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" A saw wave signal generator.\n","sig":null,"attributes":[{"value":"/ A saw wave signal generator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31279,"byte_end":31311,"line_start":940,"line_end":940,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":473},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31437,"byte_end":31443,"line_start":948,"line_end":948,"column_start":12,"column_end":18},"name":"Square","qualname":"::Square","value":"Square {  }","parent":null,"children":[{"krate":0,"index":475}],"decl_id":null,"docs":" A square wave signal generator.\n","sig":null,"attributes":[{"value":"/ A square wave signal generator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31373,"byte_end":31408,"line_start":946,"line_end":946,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31531,"byte_end":31536,"line_start":954,"line_end":954,"column_start":12,"column_end":17},"name":"Noise","qualname":"::Noise","value":"Noise {  }","parent":null,"children":[{"krate":0,"index":480}],"decl_id":null,"docs":" A noise signal generator.\n","sig":null,"attributes":[{"value":"/ A noise signal generator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31473,"byte_end":31502,"line_start":952,"line_end":952,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":483},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31619,"byte_end":31631,"line_start":960,"line_end":960,"column_start":12,"column_end":24},"name":"NoiseSimplex","qualname":"::NoiseSimplex","value":"NoiseSimplex {  }","parent":null,"children":[{"krate":0,"index":485}],"decl_id":null,"docs":" A 1D simplex-noise generator.\n","sig":null,"attributes":[{"value":"/ A 1D simplex-noise generator.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31557,"byte_end":31590,"line_start":958,"line_end":958,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":489},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31788,"byte_end":31794,"line_start":966,"line_end":966,"column_start":12,"column_end":18},"name":"AddAmp","qualname":"::AddAmp","value":"AddAmp {  }","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" An iterator that yields the sum of the frames yielded by both `other` and `self` in lock-step.\n","sig":null,"attributes":[{"value":"/ An iterator that yields the sum of the frames yielded by both `other` and `self` in lock-step.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31661,"byte_end":31759,"line_start":964,"line_end":964,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":498},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31961,"byte_end":31967,"line_start":974,"line_end":974,"column_start":12,"column_end":18},"name":"MulAmp","qualname":"::MulAmp","value":"MulAmp {  }","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502}],"decl_id":null,"docs":" An iterator that yields the product of the frames yielded by both `other` and `self` in\n lock-step.\n","sig":null,"attributes":[{"value":"/ An iterator that yields the product of the frames yielded by both `other` and `self` in","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31826,"byte_end":31917,"line_start":971,"line_end":971,"column_start":1,"column_end":92}},{"value":"/ lock-step.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31918,"byte_end":31932,"line_start":972,"line_end":972,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":507},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32182,"byte_end":32191,"line_start":982,"line_end":982,"column_start":12,"column_end":21},"name":"OffsetAmp","qualname":"::OffsetAmp","value":"OffsetAmp {  }","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"decl_id":null,"docs":" Provides an iterator that offsets the amplitude of every channel in each frame of the\n signal by some sample value and yields the resulting frames.\n","sig":null,"attributes":[{"value":"/ Provides an iterator that offsets the amplitude of every channel in each frame of the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":31999,"byte_end":32088,"line_start":979,"line_end":979,"column_start":1,"column_end":90}},{"value":"/ signal by some sample value and yields the resulting frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32089,"byte_end":32153,"line_start":980,"line_end":980,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":514},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32462,"byte_end":32470,"line_start":993,"line_end":993,"column_start":12,"column_end":20},"name":"ScaleAmp","qualname":"::ScaleAmp","value":"ScaleAmp {  }","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"decl_id":null,"docs":" An `Iterator` that scales the amplitude of the sample of each channel in every `Frame` yielded\n by `self` by the given amplitude.\n","sig":null,"attributes":[{"value":"/ An `Iterator` that scales the amplitude of the sample of each channel in every `Frame` yielded","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32297,"byte_end":32395,"line_start":990,"line_end":990,"column_start":1,"column_end":99}},{"value":"/ by `self` by the given amplitude.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32396,"byte_end":32433,"line_start":991,"line_end":991,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32748,"byte_end":32767,"line_start":1004,"line_end":1004,"column_start":12,"column_end":31},"name":"OffsetAmpPerChannel","qualname":"::OffsetAmpPerChannel","value":"OffsetAmpPerChannel {  }","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes\n in each channel of the given `amp` `Frame`.\n","sig":null,"attributes":[{"value":"/ An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32572,"byte_end":32671,"line_start":1001,"line_end":1001,"column_start":1,"column_end":100}},{"value":"/ in each channel of the given `amp` `Frame`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32672,"byte_end":32719,"line_start":1002,"line_end":1002,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32988,"byte_end":33006,"line_start":1012,"line_end":1012,"column_start":12,"column_end":30},"name":"ScaleAmpPerChannel","qualname":"::ScaleAmpPerChannel","value":"ScaleAmpPerChannel {  }","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes\n in each channel of the given `amp` `Frame`.\n","sig":null,"attributes":[{"value":"/ An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32812,"byte_end":32911,"line_start":1009,"line_end":1009,"column_start":1,"column_end":100}},{"value":"/ in each channel of the given `amp` `Frame`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":32912,"byte_end":32959,"line_start":1010,"line_end":1010,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":539},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33302,"byte_end":33307,"line_start":1022,"line_end":1022,"column_start":12,"column_end":17},"name":"MulHz","qualname":"::MulHz","value":"MulHz {  }","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"decl_id":null,"docs":" Multiplies the rate at which frames of `self` are yielded by the given `signal`.","sig":null,"attributes":[{"value":"/ Multiplies the rate at which frames of `self` are yielded by the given `signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33051,"byte_end":33135,"line_start":1017,"line_end":1017,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33136,"byte_end":33139,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ This happens by wrapping `self` in a `rate::Converter` and calling `set_playback_hz_scale`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33140,"byte_end":33234,"line_start":1019,"line_end":1019,"column_start":1,"column_end":95}},{"value":"/ with the value yielded by `signal`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33235,"byte_end":33273,"line_start":1020,"line_end":1020,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":550},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33632,"byte_end":33637,"line_start":1036,"line_end":1036,"column_start":12,"column_end":17},"name":"Delay","qualname":"::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553}],"decl_id":null,"docs":" Delays the `signal` by the given number of frames.","sig":null,"attributes":[{"value":"/ Delays the `signal` by the given number of frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33415,"byte_end":33469,"line_start":1031,"line_end":1031,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33470,"byte_end":33473,"line_start":1032,"line_end":1032,"column_start":1,"column_end":4}},{"value":"/ The delay is performed by yielding `Frame::EQUILIBRIUM` `n_frames` times before","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33474,"byte_end":33557,"line_start":1033,"line_end":1033,"column_start":1,"column_end":84}},{"value":"/ continuing to yield frames from `signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33558,"byte_end":33603,"line_start":1034,"line_end":1034,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33822,"byte_end":33829,"line_start":1044,"line_end":1044,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"decl_id":null,"docs":" A signal that calls its enclosing function and returns the original value. The signal may\n mutate state.\n","sig":null,"attributes":[{"value":"/ A signal that calls its enclosing function and returns the original value. The signal may","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33682,"byte_end":33775,"line_start":1041,"line_end":1041,"column_start":1,"column_end":94}},{"value":"/ mutate state.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33776,"byte_end":33793,"line_start":1042,"line_end":1042,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33965,"byte_end":33987,"line_start":1050,"line_end":1050,"column_start":12,"column_end":34},"name":"IntoInterleavedSamples","qualname":"::IntoInterleavedSamples","value":"IntoInterleavedSamples {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" Converts a `Signal` to a type that yields the individual interleaved samples.\n","sig":null,"attributes":[{"value":"/ Converts a `Signal` to a type that yields the individual interleaved samples.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":33872,"byte_end":33953,"line_start":1049,"line_end":1049,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34182,"byte_end":34212,"line_start":1059,"line_end":1059,"column_start":12,"column_end":42},"name":"IntoInterleavedSamplesIterator","qualname":"::IntoInterleavedSamplesIterator","value":"IntoInterleavedSamplesIterator {  }","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" Converts the `IntoInterleavedSamples` into an `Iterator` that always returns `Some`.\n","sig":null,"attributes":[{"value":"/ Converts the `IntoInterleavedSamples` into an `Iterator` that always returns `Some`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34082,"byte_end":34170,"line_start":1058,"line_end":1058,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":566},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34394,"byte_end":34408,"line_start":1068,"line_end":1068,"column_start":12,"column_end":26},"name":"UntilExhausted","qualname":"::UntilExhausted","value":"UntilExhausted {  }","parent":null,"children":[{"krate":0,"index":568}],"decl_id":null,"docs":" Yields frames from the signal until the `signal.is_exhausted()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Yields frames from the signal until the `signal.is_exhausted()` returns `true`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34282,"byte_end":34365,"line_start":1066,"line_end":1066,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":572},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34568,"byte_end":34575,"line_start":1077,"line_end":1077,"column_start":12,"column_end":19},"name":"ClipAmp","qualname":"::ClipAmp","value":"ClipAmp {  }","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"decl_id":null,"docs":" Clips samples in each frame yielded by `signal` to the given threshhold amplitude.\n","sig":null,"attributes":[{"value":"/ Clips samples in each frame yielded by `signal` to the given threshhold amplitude.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34453,"byte_end":34539,"line_start":1075,"line_end":1075,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35033,"byte_end":35037,"line_start":1092,"line_end":1092,"column_start":12,"column_end":16},"name":"Fork","qualname":"::Fork","value":"Fork {  }","parent":null,"children":[{"krate":0,"index":582}],"decl_id":null,"docs":" Represents a forked `Signal` that has not yet been split into its two branches.","sig":null,"attributes":[{"value":"/ Represents a forked `Signal` that has not yet been split into its two branches.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34681,"byte_end":34764,"line_start":1085,"line_end":1085,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34765,"byte_end":34768,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ A `Fork` can be split into its two branches via either of the following methods:","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34769,"byte_end":34853,"line_start":1087,"line_end":1087,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34854,"byte_end":34857,"line_start":1088,"line_end":1088,"column_start":1,"column_end":4}},{"value":"/ - `fork.by_rc()`: consumes self and shares the fork via `Rc<RefCell>`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34858,"byte_end":34932,"line_start":1089,"line_end":1089,"column_start":1,"column_end":75}},{"value":"/ - `fork.by_ref()`: borrows self and shares the fork via `&RefCell`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":34933,"byte_end":35004,"line_start":1090,"line_end":1090,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35816,"byte_end":35821,"line_start":1115,"line_end":1115,"column_start":12,"column_end":17},"name":"by_rc","qualname":"<Fork<S, D>>::by_rc","value":"fn (self) -> (BranchRcA<S, D>, BranchRcB<S, D>)","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Fork` and returns two branches that share the signal and inner ring buffer\n via a reference countered pointer (`Rc`).","sig":null,"attributes":[{"value":"/ Consumes the `Fork` and returns two branches that share the signal and inner ring buffer","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35292,"byte_end":35384,"line_start":1107,"line_end":1107,"column_start":5,"column_end":97}},{"value":"/ via a reference countered pointer (`Rc`).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35389,"byte_end":35434,"line_start":1108,"line_end":1108,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35439,"byte_end":35442,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ Note: This requires dynamical allocation as `Rc<RefCell<Self>>` is used to share the signal","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35447,"byte_end":35542,"line_start":1110,"line_end":1110,"column_start":5,"column_end":100}},{"value":"/ and ring buffer. A user may avoid this dynamic allocation by using the `Fork::by_ref`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35547,"byte_end":35636,"line_start":1111,"line_end":1111,"column_start":5,"column_end":94}},{"value":"/ method instead, however this comes with the ergonomic cost of bounding the lifetime of the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35641,"byte_end":35735,"line_start":1112,"line_end":1112,"column_start":5,"column_end":99}},{"value":"/ branches to the lifetime of the fork.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35740,"byte_end":35781,"line_start":1113,"line_end":1113,"column_start":5,"column_end":46}},{"value":"/ `Fork::by_ref`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35786,"byte_end":35804,"line_start":1114,"line_end":1114,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36473,"byte_end":36479,"line_start":1132,"line_end":1132,"column_start":12,"column_end":18},"name":"by_ref","qualname":"<Fork<S, D>>::by_ref","value":"fn (&mut self) -> (BranchRefA<S, D>, BranchRefB<S, D>)","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrows the `Fork` and returns two branches that share the signal and inner ring\n buffer via reference.","sig":null,"attributes":[{"value":"/ Mutably borrows the `Fork` and returns two branches that share the signal and inner ring","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36135,"byte_end":36227,"line_start":1127,"line_end":1127,"column_start":5,"column_end":97}},{"value":"/ buffer via reference.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36232,"byte_end":36257,"line_start":1128,"line_end":1128,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36262,"byte_end":36265,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ This is more efficient than `Fork::by_rc` as it does not require `Rc`, however it may be","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36270,"byte_end":36362,"line_start":1130,"line_end":1130,"column_start":5,"column_end":97}},{"value":"/ less ergonomic in some cases as the returned branches are bound to the lifetime of `Fork`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36367,"byte_end":36461,"line_start":1131,"line_end":1131,"column_start":5,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":597},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39708,"byte_end":39717,"line_start":1231,"line_end":1231,"column_start":16,"column_end":25},"name":"BranchRcA","qualname":"::BranchRcA","value":"BranchRcA {  }","parent":null,"children":[{"krate":0,"index":600}],"decl_id":null,"docs":" One of the two `Branch` signals returned by `Fork::by_rc`.\n","sig":null,"attributes":[{"value":"/ One of the two `Branch` signals returned by `Fork::by_rc`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36938,"byte_end":37000,"line_start":1147,"line_end":1147,"column_start":9,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":601},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39719,"byte_end":39729,"line_start":1231,"line_end":1231,"column_start":27,"column_end":37},"name":"BranchRefA","qualname":"::BranchRefA","value":"BranchRefA {  }","parent":null,"children":[{"krate":0,"index":605}],"decl_id":null,"docs":" One of the two `Branch` signals returned by `Fork::by_ref`.\n","sig":null,"attributes":[{"value":"/ One of the two `Branch` signals returned by `Fork::by_ref`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":37108,"byte_end":37171,"line_start":1152,"line_end":1152,"column_start":9,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39753,"byte_end":39762,"line_start":1232,"line_end":1232,"column_start":16,"column_end":25},"name":"BranchRcB","qualname":"::BranchRcB","value":"BranchRcB {  }","parent":null,"children":[{"krate":0,"index":629}],"decl_id":null,"docs":" One of the two `Branch` signals returned by `Fork::by_rc`.\n","sig":null,"attributes":[{"value":"/ One of the two `Branch` signals returned by `Fork::by_rc`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":36938,"byte_end":37000,"line_start":1147,"line_end":1147,"column_start":9,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":630},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39764,"byte_end":39774,"line_start":1232,"line_end":1232,"column_start":27,"column_end":37},"name":"BranchRefB","qualname":"::BranchRefB","value":"BranchRefB {  }","parent":null,"children":[{"krate":0,"index":634}],"decl_id":null,"docs":" One of the two `Branch` signals returned by `Fork::by_ref`.\n","sig":null,"attributes":[{"value":"/ One of the two `Branch` signals returned by `Fork::by_ref`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":37108,"byte_end":37171,"line_start":1152,"line_end":1152,"column_start":9,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":655},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39888,"byte_end":39892,"line_start":1236,"line_end":1236,"column_start":12,"column_end":16},"name":"Take","qualname":"::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658}],"decl_id":null,"docs":" An iterator that yields `n` number of `Frame`s from the inner `signal`.\n","sig":null,"attributes":[{"value":"/ An iterator that yields `n` number of `Frame`s from the inner `signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39784,"byte_end":39859,"line_start":1234,"line_end":1234,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":662},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40392,"byte_end":40400,"line_start":1252,"line_end":1252,"column_start":12,"column_end":20},"name":"Buffered","qualname":"::Buffered","value":"Buffered {  }","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"decl_id":null,"docs":" Buffers the signal using the given ring buffer.","sig":null,"attributes":[{"value":"/ Buffers the signal using the given ring buffer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":39951,"byte_end":40002,"line_start":1244,"line_end":1244,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40003,"byte_end":40006,"line_start":1245,"line_end":1245,"column_start":1,"column_end":4}},{"value":"/ When `next` is called, `Buffered` will first check if the ring buffer is empty. If so, it will","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40007,"byte_end":40105,"line_start":1246,"line_end":1246,"column_start":1,"column_end":99}},{"value":"/ completely fill the ring buffer with `signal` before yielding the next frame.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40106,"byte_end":40187,"line_start":1247,"line_end":1247,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40188,"byte_end":40191,"line_start":1248,"line_end":1248,"column_start":1,"column_end":4}},{"value":"/ If `next` is called and the ring buffer still contains un-yielded values, the next frame will","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40192,"byte_end":40289,"line_start":1249,"line_end":1249,"column_start":1,"column_end":98}},{"value":"/ be popped from the front of the ring buffer and immediately returned.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40290,"byte_end":40363,"line_start":1250,"line_end":1250,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40631,"byte_end":40645,"line_start":1260,"line_end":1260,"column_start":12,"column_end":26},"name":"BufferedFrames","qualname":"::BufferedFrames","value":"BufferedFrames {  }","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" An iterator that pops elements from the inner bounded ring buffer and yields them.","sig":null,"attributes":[{"value":"/ An iterator that pops elements from the inner bounded ring buffer and yields them.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40469,"byte_end":40555,"line_start":1257,"line_end":1257,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40556,"byte_end":40559,"line_start":1258,"line_end":1258,"column_start":1,"column_end":4}},{"value":"/ Returns `None` once the inner ring buffer is exhausted.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40560,"byte_end":40619,"line_start":1259,"line_end":1259,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41241,"byte_end":41252,"line_start":1281,"line_end":1281,"column_start":8,"column_end":19},"name":"equilibrium","qualname":"::equilibrium","value":"fn <F> () -> Equilibrium<F>","parent":null,"children":[],"decl_id":null,"docs":" Provides an iterator that endlessly yields `Frame`s of type `F` at equilibrium.","sig":null,"attributes":[{"value":"/ Provides an iterator that endlessly yields `Frame`s of type `F` at equilibrium.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40739,"byte_end":40822,"line_start":1266,"line_end":1266,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40823,"byte_end":40826,"line_start":1267,"line_end":1267,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40827,"byte_end":40840,"line_start":1268,"line_end":1268,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40841,"byte_end":40844,"line_start":1269,"line_end":1269,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40845,"byte_end":40856,"line_start":1270,"line_end":1270,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40857,"byte_end":40903,"line_start":1271,"line_end":1271,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40904,"byte_end":40907,"line_start":1272,"line_end":1272,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40908,"byte_end":40923,"line_start":1273,"line_end":1273,"column_start":1,"column_end":16}},{"value":"/     let equilibrium: Vec<f32> = signal::equilibrium().take(4).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":40924,"byte_end":41000,"line_start":1274,"line_end":1274,"column_start":1,"column_end":77}},{"value":"/     assert_eq!(equilibrium, vec![0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41001,"byte_end":41059,"line_start":1275,"line_end":1275,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41060,"byte_end":41063,"line_start":1276,"line_end":1276,"column_start":1,"column_end":4}},{"value":"/     let equilibrium: Vec<[u8; 2]> = signal::equilibrium().take(3).collect();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41064,"byte_end":41144,"line_start":1277,"line_end":1277,"column_start":1,"column_end":81}},{"value":"/     assert_eq!(equilibrium, vec![[128, 128], [128, 128], [128, 128]]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41145,"byte_end":41219,"line_start":1278,"line_end":1278,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41220,"byte_end":41225,"line_start":1279,"line_end":1279,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41226,"byte_end":41233,"line_start":1280,"line_end":1280,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41914,"byte_end":41917,"line_start":1307,"line_end":1307,"column_start":8,"column_end":11},"name":"gen","qualname":"::gen","value":"fn <G, F> (gen: G) -> Gen<G, F>","parent":null,"children":[],"decl_id":null,"docs":" A signal that generates frames using the given function.","sig":null,"attributes":[{"value":"/ A signal that generates frames using the given function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41367,"byte_end":41427,"line_start":1290,"line_end":1290,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41428,"byte_end":41431,"line_start":1291,"line_end":1291,"column_start":1,"column_end":4}},{"value":"/ The resulting signal is assumed to be infinite and `is_exhausted` will always return `false`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41432,"byte_end":41529,"line_start":1292,"line_end":1292,"column_start":1,"column_end":98}},{"value":"/ To create an exhaustive signal first create an `Iterator` and then use `from_iter`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41530,"byte_end":41617,"line_start":1293,"line_end":1293,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41618,"byte_end":41621,"line_start":1294,"line_end":1294,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41622,"byte_end":41635,"line_start":1295,"line_end":1295,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41636,"byte_end":41639,"line_start":1296,"line_end":1296,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41640,"byte_end":41651,"line_start":1297,"line_end":1297,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41652,"byte_end":41698,"line_start":1298,"line_end":1298,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41699,"byte_end":41702,"line_start":1299,"line_end":1299,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41703,"byte_end":41718,"line_start":1300,"line_end":1300,"column_start":1,"column_end":16}},{"value":"/     let mut frames = signal::gen(|| [0.5]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41719,"byte_end":41766,"line_start":1301,"line_end":1301,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(frames.next(), [0.5]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41767,"byte_end":41808,"line_start":1302,"line_end":1302,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(frames.next(), [0.5]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41809,"byte_end":41850,"line_start":1303,"line_end":1303,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(frames.next(), [0.5]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41851,"byte_end":41892,"line_start":1304,"line_end":1304,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41893,"byte_end":41898,"line_start":1305,"line_end":1305,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":41899,"byte_end":41906,"line_start":1306,"line_end":1306,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42738,"byte_end":42745,"line_start":1340,"line_end":1340,"column_start":8,"column_end":15},"name":"gen_mut","qualname":"::gen_mut","value":"fn <G, F> (gen_mut: G) -> GenMut<G, F>","parent":null,"children":[],"decl_id":null,"docs":" A signal that generates frames using the given function which may mutate some state.","sig":null,"attributes":[{"value":"/ A signal that generates frames using the given function which may mutate some state.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42064,"byte_end":42152,"line_start":1318,"line_end":1318,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42153,"byte_end":42156,"line_start":1319,"line_end":1319,"column_start":1,"column_end":4}},{"value":"/ The resulting signal is assumed to be infinite and `is_exhausted` will always return `false`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42157,"byte_end":42254,"line_start":1320,"line_end":1320,"column_start":1,"column_end":98}},{"value":"/ To create an exhaustive signal first create an `Iterator` and then use `from_iter`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42255,"byte_end":42342,"line_start":1321,"line_end":1321,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42343,"byte_end":42346,"line_start":1322,"line_end":1322,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42347,"byte_end":42360,"line_start":1323,"line_end":1323,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42361,"byte_end":42364,"line_start":1324,"line_end":1324,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42365,"byte_end":42376,"line_start":1325,"line_end":1325,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42377,"byte_end":42423,"line_start":1326,"line_end":1326,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42424,"byte_end":42427,"line_start":1327,"line_end":1327,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42428,"byte_end":42443,"line_start":1328,"line_end":1328,"column_start":1,"column_end":16}},{"value":"/     let mut f = [0.0];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42444,"byte_end":42470,"line_start":1329,"line_end":1329,"column_start":1,"column_end":27}},{"value":"/     let mut signal = signal::gen_mut(|| {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42471,"byte_end":42516,"line_start":1330,"line_end":1330,"column_start":1,"column_end":46}},{"value":"/         let r = f;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42517,"byte_end":42539,"line_start":1331,"line_end":1331,"column_start":1,"column_end":23}},{"value":"/         f[0] += 0.1;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42540,"byte_end":42564,"line_start":1332,"line_end":1332,"column_start":1,"column_end":25}},{"value":"/         r","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42565,"byte_end":42578,"line_start":1333,"line_end":1333,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42579,"byte_end":42590,"line_start":1334,"line_end":1334,"column_start":1,"column_end":12}},{"value":"/     assert_eq!(signal.next(), [0.0]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42591,"byte_end":42632,"line_start":1335,"line_end":1335,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(signal.next(), [0.1]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42633,"byte_end":42674,"line_start":1336,"line_end":1336,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(signal.next(), [0.2]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42675,"byte_end":42716,"line_start":1337,"line_end":1337,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42717,"byte_end":42722,"line_start":1338,"line_end":1338,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42723,"byte_end":42730,"line_start":1339,"line_end":1339,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43669,"byte_end":43678,"line_start":1373,"line_end":1373,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::from_iter","value":"fn <I> (frames: I) -> FromIterator<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Signal` from the given `Frame`-yielding `Iterator`.","sig":null,"attributes":[{"value":"/ Create a new `Signal` from the given `Frame`-yielding `Iterator`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42913,"byte_end":42982,"line_start":1351,"line_end":1351,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42983,"byte_end":42986,"line_start":1352,"line_end":1352,"column_start":1,"column_end":4}},{"value":"/ When the `Iterator` is exhausted, the new `Signal` will yield `F::equilibrium`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":42987,"byte_end":43070,"line_start":1353,"line_end":1353,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43071,"byte_end":43074,"line_start":1354,"line_end":1354,"column_start":1,"column_end":4}},{"value":"/ Note that `Iterator::next` will be called immediately so that `FromIterator` can store the next","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43075,"byte_end":43174,"line_start":1355,"line_end":1355,"column_start":1,"column_end":100}},{"value":"/ pending frame and efficiently test for exhaustiveness.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43175,"byte_end":43233,"line_start":1356,"line_end":1356,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43234,"byte_end":43237,"line_start":1357,"line_end":1357,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43238,"byte_end":43251,"line_start":1358,"line_end":1358,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43252,"byte_end":43255,"line_start":1359,"line_end":1359,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43256,"byte_end":43267,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43268,"byte_end":43314,"line_start":1361,"line_end":1361,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43315,"byte_end":43318,"line_start":1362,"line_end":1362,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43319,"byte_end":43334,"line_start":1363,"line_end":1363,"column_start":1,"column_end":16}},{"value":"/     let frames = [[1], [-3], [5], [6]];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43335,"byte_end":43378,"line_start":1364,"line_end":1364,"column_start":1,"column_end":44}},{"value":"/     let mut signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43379,"byte_end":43446,"line_start":1365,"line_end":1365,"column_start":1,"column_end":68}},{"value":"/     assert_eq!(signal.next(), [1]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43447,"byte_end":43486,"line_start":1366,"line_end":1366,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), [-3]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43487,"byte_end":43527,"line_start":1367,"line_end":1367,"column_start":1,"column_end":41}},{"value":"/     assert_eq!(signal.next(), [5]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43528,"byte_end":43567,"line_start":1368,"line_end":1368,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), [6]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43568,"byte_end":43607,"line_start":1369,"line_end":1369,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), [0]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43608,"byte_end":43647,"line_start":1370,"line_end":1370,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43648,"byte_end":43653,"line_start":1371,"line_end":1371,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43654,"byte_end":43661,"line_start":1372,"line_end":1372,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44666,"byte_end":44695,"line_start":1408,"line_end":1408,"column_start":8,"column_end":37},"name":"from_interleaved_samples_iter","qualname":"::from_interleaved_samples_iter","value":"fn <I, F> (samples: I) -> FromInterleavedSamplesIterator<I::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Signal` from the given `Frame`-yielding `Iterator`.","sig":null,"attributes":[{"value":"/ Create a new `Signal` from the given `Frame`-yielding `Iterator`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43906,"byte_end":43975,"line_start":1386,"line_end":1386,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43976,"byte_end":43979,"line_start":1387,"line_end":1387,"column_start":1,"column_end":4}},{"value":"/ When the `Iterator` is exhausted, the new `Signal` will yield `F::equilibrium`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":43980,"byte_end":44063,"line_start":1388,"line_end":1388,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44064,"byte_end":44067,"line_start":1389,"line_end":1389,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44068,"byte_end":44081,"line_start":1390,"line_end":1390,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44082,"byte_end":44085,"line_start":1391,"line_end":1391,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44086,"byte_end":44097,"line_start":1392,"line_end":1392,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44098,"byte_end":44144,"line_start":1393,"line_end":1393,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44145,"byte_end":44148,"line_start":1394,"line_end":1394,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44149,"byte_end":44164,"line_start":1395,"line_end":1395,"column_start":1,"column_end":16}},{"value":"/     let foo = [0, 1, 2, 3];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44165,"byte_end":44196,"line_start":1396,"line_end":1396,"column_start":1,"column_end":32}},{"value":"/     let mut signal = signal::from_interleaved_samples_iter::<_, [i32; 2]>(foo.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44197,"byte_end":44296,"line_start":1397,"line_end":1397,"column_start":1,"column_end":100}},{"value":"/     assert_eq!(signal.next(), [0, 1]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44297,"byte_end":44339,"line_start":1398,"line_end":1398,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(signal.next(), [2, 3]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44340,"byte_end":44382,"line_start":1399,"line_end":1399,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(signal.next(), [0, 0]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44383,"byte_end":44425,"line_start":1400,"line_end":1400,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44426,"byte_end":44429,"line_start":1401,"line_end":1401,"column_start":1,"column_end":4}},{"value":"/     let bar = [0, 1, 2];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44430,"byte_end":44458,"line_start":1402,"line_end":1402,"column_start":1,"column_end":29}},{"value":"/     let mut signal = signal::from_interleaved_samples_iter::<_, [i32; 2]>(bar.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44459,"byte_end":44558,"line_start":1403,"line_end":1403,"column_start":1,"column_end":100}},{"value":"/     assert_eq!(signal.next(), [0, 1]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44559,"byte_end":44601,"line_start":1404,"line_end":1404,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(signal.next(), [0, 0]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44602,"byte_end":44644,"line_start":1405,"line_end":1405,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44645,"byte_end":44650,"line_start":1406,"line_end":1406,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":44651,"byte_end":44658,"line_start":1407,"line_end":1407,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45665,"byte_end":45670,"line_start":1443,"line_end":1443,"column_start":8,"column_end":13},"name":"phase","qualname":"::phase","value":"fn <S> (step: S) -> Phase<S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Phase` that continuously steps forward by the given `step` size yielder.","sig":null,"attributes":[{"value":"/ Creates a `Phase` that continuously steps forward by the given `step` size yielder.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45038,"byte_end":45125,"line_start":1424,"line_end":1424,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45126,"byte_end":45129,"line_start":1425,"line_end":1425,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45130,"byte_end":45143,"line_start":1426,"line_end":1426,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45144,"byte_end":45147,"line_start":1427,"line_end":1427,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45148,"byte_end":45159,"line_start":1428,"line_end":1428,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45160,"byte_end":45206,"line_start":1429,"line_end":1429,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45207,"byte_end":45210,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45211,"byte_end":45226,"line_start":1431,"line_end":1431,"column_start":1,"column_end":16}},{"value":"/     let step = signal::rate(4.0).const_hz(1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45227,"byte_end":45278,"line_start":1432,"line_end":1432,"column_start":1,"column_end":52}},{"value":"/     // Note that this is the same as `step.phase()`, a composable alternative.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45279,"byte_end":45361,"line_start":1433,"line_end":1433,"column_start":1,"column_end":83}},{"value":"/     let mut phase = signal::phase(step);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45362,"byte_end":45406,"line_start":1434,"line_end":1434,"column_start":1,"column_end":45}},{"value":"/     assert_eq!(phase.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45407,"byte_end":45445,"line_start":1435,"line_end":1435,"column_start":1,"column_end":39}},{"value":"/     assert_eq!(phase.next(), 0.25);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45446,"byte_end":45485,"line_start":1436,"line_end":1436,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(phase.next(), 0.5);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45486,"byte_end":45524,"line_start":1437,"line_end":1437,"column_start":1,"column_end":39}},{"value":"/     assert_eq!(phase.next(), 0.75);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45525,"byte_end":45564,"line_start":1438,"line_end":1438,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(phase.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45565,"byte_end":45603,"line_start":1439,"line_end":1439,"column_start":1,"column_end":39}},{"value":"/     assert_eq!(phase.next(), 0.25);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45604,"byte_end":45643,"line_start":1440,"line_end":1440,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45644,"byte_end":45649,"line_start":1441,"line_end":1441,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45650,"byte_end":45657,"line_start":1442,"line_end":1442,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46083,"byte_end":46087,"line_start":1458,"line_end":1458,"column_start":8,"column_end":12},"name":"rate","qualname":"::rate","value":"fn (hz: f64) -> Rate","parent":null,"children":[],"decl_id":null,"docs":" Creates a frame `Rate` (aka sample rate) representing the rate at which a signal may be\n sampled.","sig":null,"attributes":[{"value":"/ Creates a frame `Rate` (aka sample rate) representing the rate at which a signal may be","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45776,"byte_end":45867,"line_start":1453,"line_end":1453,"column_start":1,"column_end":92}},{"value":"/ sampled.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45868,"byte_end":45880,"line_start":1454,"line_end":1454,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45881,"byte_end":45884,"line_start":1455,"line_end":1455,"column_start":1,"column_end":4}},{"value":"/ This is necessary for composing `Hz` or `ConstHz`, both of which may be used to step forward","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45885,"byte_end":45981,"line_start":1456,"line_end":1456,"column_start":1,"column_end":97}},{"value":"/ the `Phase` for some kind of oscillator (i.e. `Sine`, `Saw`, `Square` or `NoiseSimplex`).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":45982,"byte_end":46075,"line_start":1457,"line_end":1457,"column_start":1,"column_end":94}}]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46619,"byte_end":46623,"line_start":1478,"line_end":1478,"column_start":8,"column_end":12},"name":"sine","qualname":"::sine","value":"fn <S> (phase: Phase<S>) -> Sine<S>","parent":null,"children":[],"decl_id":null,"docs":" Produces a `Signal` that yields a sine wave oscillating at the given hz.","sig":null,"attributes":[{"value":"/ Produces a `Signal` that yields a sine wave oscillating at the given hz.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46130,"byte_end":46206,"line_start":1462,"line_end":1462,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46207,"byte_end":46210,"line_start":1463,"line_end":1463,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46211,"byte_end":46224,"line_start":1464,"line_end":1464,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46225,"byte_end":46228,"line_start":1465,"line_end":1465,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46229,"byte_end":46240,"line_start":1466,"line_end":1466,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46241,"byte_end":46287,"line_start":1467,"line_end":1467,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46288,"byte_end":46291,"line_start":1468,"line_end":1468,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46292,"byte_end":46307,"line_start":1469,"line_end":1469,"column_start":1,"column_end":16}},{"value":"/     // Generates a sine wave signal at 1hz to be sampled 4 times per second.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46308,"byte_end":46388,"line_start":1470,"line_end":1470,"column_start":1,"column_end":81}},{"value":"/     let mut signal = signal::rate(4.0).const_hz(1.0).sine();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46389,"byte_end":46453,"line_start":1471,"line_end":1471,"column_start":1,"column_end":65}},{"value":"/     assert_eq!(signal.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46454,"byte_end":46493,"line_start":1472,"line_end":1472,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), 1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46494,"byte_end":46533,"line_start":1473,"line_end":1473,"column_start":1,"column_end":40}},{"value":"/     signal.next();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46534,"byte_end":46556,"line_start":1474,"line_end":1474,"column_start":1,"column_end":23}},{"value":"/     assert_eq!(signal.next(), -1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46557,"byte_end":46597,"line_start":1475,"line_end":1475,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46598,"byte_end":46603,"line_start":1476,"line_end":1476,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46604,"byte_end":46611,"line_start":1477,"line_end":1477,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47189,"byte_end":47192,"line_start":1498,"line_end":1498,"column_start":8,"column_end":11},"name":"saw","qualname":"::saw","value":"fn <S> (phase: Phase<S>) -> Saw<S>","parent":null,"children":[],"decl_id":null,"docs":" Produces a `Signal` that yields a saw wave oscillating at the given hz.","sig":null,"attributes":[{"value":"/ Produces a `Signal` that yields a saw wave oscillating at the given hz.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46686,"byte_end":46761,"line_start":1482,"line_end":1482,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46762,"byte_end":46765,"line_start":1483,"line_end":1483,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46766,"byte_end":46779,"line_start":1484,"line_end":1484,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46780,"byte_end":46783,"line_start":1485,"line_end":1485,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46784,"byte_end":46795,"line_start":1486,"line_end":1486,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46796,"byte_end":46842,"line_start":1487,"line_end":1487,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46843,"byte_end":46846,"line_start":1488,"line_end":1488,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46847,"byte_end":46862,"line_start":1489,"line_end":1489,"column_start":1,"column_end":16}},{"value":"/     // Generates a saw wave signal at 1hz to be sampled 4 times per second.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46863,"byte_end":46942,"line_start":1490,"line_end":1490,"column_start":1,"column_end":80}},{"value":"/     let mut signal = signal::rate(4.0).const_hz(1.0).saw();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":46943,"byte_end":47006,"line_start":1491,"line_end":1491,"column_start":1,"column_end":64}},{"value":"/     assert_eq!(signal.next(), 1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47007,"byte_end":47046,"line_start":1492,"line_end":1492,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), 0.5);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47047,"byte_end":47086,"line_start":1493,"line_end":1493,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47087,"byte_end":47126,"line_start":1494,"line_end":1494,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), -0.5);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47127,"byte_end":47167,"line_start":1495,"line_end":1495,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47168,"byte_end":47173,"line_start":1496,"line_end":1496,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47174,"byte_end":47181,"line_start":1497,"line_end":1497,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47766,"byte_end":47772,"line_start":1518,"line_end":1518,"column_start":8,"column_end":14},"name":"square","qualname":"::square","value":"fn <S> (phase: Phase<S>) -> Square<S>","parent":null,"children":[],"decl_id":null,"docs":" Produces a `Signal` that yields a square wave oscillating at the given hz.","sig":null,"attributes":[{"value":"/ Produces a `Signal` that yields a square wave oscillating at the given hz.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47253,"byte_end":47331,"line_start":1502,"line_end":1502,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47332,"byte_end":47335,"line_start":1503,"line_end":1503,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47336,"byte_end":47349,"line_start":1504,"line_end":1504,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47350,"byte_end":47353,"line_start":1505,"line_end":1505,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47354,"byte_end":47365,"line_start":1506,"line_end":1506,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47366,"byte_end":47412,"line_start":1507,"line_end":1507,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47413,"byte_end":47416,"line_start":1508,"line_end":1508,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47417,"byte_end":47432,"line_start":1509,"line_end":1509,"column_start":1,"column_end":16}},{"value":"/     // Generates a square wave signal at 1hz to be sampled 4 times per second.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47433,"byte_end":47515,"line_start":1510,"line_end":1510,"column_start":1,"column_end":83}},{"value":"/     let mut signal = signal::rate(4.0).const_hz(1.0).square();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47516,"byte_end":47582,"line_start":1511,"line_end":1511,"column_start":1,"column_end":67}},{"value":"/     assert_eq!(signal.next(), 1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47583,"byte_end":47622,"line_start":1512,"line_end":1512,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), 1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47623,"byte_end":47662,"line_start":1513,"line_end":1513,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(signal.next(), -1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47663,"byte_end":47703,"line_start":1514,"line_end":1514,"column_start":1,"column_end":41}},{"value":"/     assert_eq!(signal.next(), -1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47704,"byte_end":47744,"line_start":1515,"line_end":1515,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47745,"byte_end":47750,"line_start":1516,"line_end":1516,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47751,"byte_end":47758,"line_start":1517,"line_end":1517,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48166,"byte_end":48171,"line_start":1536,"line_end":1536,"column_start":8,"column_end":13},"name":"noise","qualname":"::noise","value":"fn (seed: u64) -> Noise","parent":null,"children":[],"decl_id":null,"docs":" Produces a `Signal` that yields random values between -1.0..1.0.","sig":null,"attributes":[{"value":"/ Produces a `Signal` that yields random values between -1.0..1.0.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47839,"byte_end":47907,"line_start":1522,"line_end":1522,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47908,"byte_end":47911,"line_start":1523,"line_end":1523,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47912,"byte_end":47925,"line_start":1524,"line_end":1524,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47926,"byte_end":47929,"line_start":1525,"line_end":1525,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47930,"byte_end":47941,"line_start":1526,"line_end":1526,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47942,"byte_end":47988,"line_start":1527,"line_end":1527,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47989,"byte_end":47992,"line_start":1528,"line_end":1528,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":47993,"byte_end":48008,"line_start":1529,"line_end":1529,"column_start":1,"column_end":16}},{"value":"/     let mut noise = signal::noise(0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48009,"byte_end":48050,"line_start":1530,"line_end":1530,"column_start":1,"column_end":42}},{"value":"/     for n in noise.take(1_000_000) {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48051,"byte_end":48091,"line_start":1531,"line_end":1531,"column_start":1,"column_end":41}},{"value":"/         assert!(-1.0 <= n && n < 1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48092,"byte_end":48134,"line_start":1532,"line_end":1532,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48135,"byte_end":48144,"line_start":1533,"line_end":1533,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48145,"byte_end":48150,"line_start":1534,"line_end":1534,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48151,"byte_end":48158,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":127},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48740,"byte_end":48753,"line_start":1557,"line_end":1557,"column_start":8,"column_end":21},"name":"noise_simplex","qualname":"::noise_simplex","value":"fn <S> (phase: Phase<S>) -> NoiseSimplex<S>","parent":null,"children":[],"decl_id":null,"docs":" Produces a 1-dimensional simplex noise `Signal`.","sig":null,"attributes":[{"value":"/ Produces a 1-dimensional simplex noise `Signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48222,"byte_end":48274,"line_start":1540,"line_end":1540,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48275,"byte_end":48278,"line_start":1541,"line_end":1541,"column_start":1,"column_end":4}},{"value":"/ This is sometimes known as the \"drunken walk\" or \"noise walk\".","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48279,"byte_end":48345,"line_start":1542,"line_end":1542,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48346,"byte_end":48349,"line_start":1543,"line_end":1543,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48350,"byte_end":48363,"line_start":1544,"line_end":1544,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48364,"byte_end":48367,"line_start":1545,"line_end":1545,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48368,"byte_end":48379,"line_start":1546,"line_end":1546,"column_start":1,"column_end":12}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48380,"byte_end":48426,"line_start":1547,"line_end":1547,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48427,"byte_end":48430,"line_start":1548,"line_end":1548,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48431,"byte_end":48446,"line_start":1549,"line_end":1549,"column_start":1,"column_end":16}},{"value":"/     // Creates a simplex noise signal oscillating at 440hz sampled 44_100 times per second.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48447,"byte_end":48542,"line_start":1550,"line_end":1550,"column_start":1,"column_end":96}},{"value":"/     let mut signal = signal::rate(44_100.0).const_hz(440.0).noise_simplex();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48543,"byte_end":48623,"line_start":1551,"line_end":1551,"column_start":1,"column_end":81}},{"value":"/     for n in signal.take(1_000_000) {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48624,"byte_end":48665,"line_start":1552,"line_end":1552,"column_start":1,"column_end":42}},{"value":"/         assert!(-1.0 <= n && n < 1.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48666,"byte_end":48708,"line_start":1553,"line_end":1553,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48709,"byte_end":48718,"line_start":1554,"line_end":1554,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48719,"byte_end":48724,"line_start":1555,"line_end":1555,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":48725,"byte_end":48732,"line_start":1556,"line_end":1556,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52716,"byte_end":52724,"line_start":1788,"line_end":1788,"column_start":12,"column_end":20},"name":"const_hz","qualname":"<Rate>::const_hz","value":"fn (self, hz: f64) -> ConstHz","parent":null,"children":[],"decl_id":null,"docs":" Create a `ConstHz` signal which consistently yields `hz / rate`.\n","sig":null,"attributes":[{"value":"/ Create a `ConstHz` signal which consistently yields `hz / rate`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52636,"byte_end":52704,"line_start":1787,"line_end":1787,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53441,"byte_end":53443,"line_start":1811,"line_end":1811,"column_start":12,"column_end":14},"name":"hz","qualname":"<Rate>::hz","value":"fn <S> (self, hz: S) -> Hz<S>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Hz` signal which yields phase step sizes controlled by an input\n signal `hz`.","sig":null,"attributes":[{"value":"/ Create a `Hz` signal which yields phase step sizes controlled by an input","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52803,"byte_end":52880,"line_start":1792,"line_end":1792,"column_start":5,"column_end":82}},{"value":"/ signal `hz`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52885,"byte_end":52901,"line_start":1793,"line_end":1793,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52906,"byte_end":52909,"line_start":1794,"line_end":1794,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52914,"byte_end":52927,"line_start":1795,"line_end":1795,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52932,"byte_end":52935,"line_start":1796,"line_end":1796,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52940,"byte_end":52952,"line_start":1797,"line_end":1797,"column_start":5,"column_end":17}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52957,"byte_end":53003,"line_start":1798,"line_end":1798,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53008,"byte_end":53011,"line_start":1799,"line_end":1799,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53016,"byte_end":53031,"line_start":1800,"line_end":1800,"column_start":5,"column_end":20}},{"value":"/     let step = signal::rate(4.0).hz(signal::gen(|| 1.0));","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53036,"byte_end":53097,"line_start":1801,"line_end":1801,"column_start":5,"column_end":66}},{"value":"/     let mut phase = signal::phase(step);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53102,"byte_end":53146,"line_start":1802,"line_end":1802,"column_start":5,"column_end":49}},{"value":"/     assert_eq!(phase.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53151,"byte_end":53189,"line_start":1803,"line_end":1803,"column_start":5,"column_end":43}},{"value":"/     assert_eq!(phase.next(), 0.25);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53194,"byte_end":53233,"line_start":1804,"line_end":1804,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(phase.next(), 0.5);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53238,"byte_end":53276,"line_start":1805,"line_end":1805,"column_start":5,"column_end":43}},{"value":"/     assert_eq!(phase.next(), 0.75);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53281,"byte_end":53320,"line_start":1806,"line_end":1806,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(phase.next(), 0.0);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53325,"byte_end":53363,"line_start":1807,"line_end":1807,"column_start":5,"column_end":43}},{"value":"/     assert_eq!(phase.next(), 0.25);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53368,"byte_end":53407,"line_start":1808,"line_end":1808,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53412,"byte_end":53417,"line_start":1809,"line_end":1809,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53422,"byte_end":53429,"line_start":1810,"line_end":1810,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53775,"byte_end":53780,"line_start":1826,"line_end":1826,"column_start":12,"column_end":17},"name":"phase","qualname":"<Hz<S>>::phase","value":"fn (self) -> Phase<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Phase` iterator that, for every `hz` yielded by `self`, yields a phase that is\n stepped by `hz / self.rate.hz`.\n","sig":null,"attributes":[{"value":"/ Construct a `Phase` iterator that, for every `hz` yielded by `self`, yields a phase that is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53614,"byte_end":53709,"line_start":1823,"line_end":1823,"column_start":5,"column_end":100}},{"value":"/ stepped by `hz / self.rate.hz`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53714,"byte_end":53749,"line_start":1824,"line_end":1824,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53754,"byte_end":53763,"line_start":1825,"line_end":1825,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53921,"byte_end":53925,"line_start":1832,"line_end":1832,"column_start":12,"column_end":16},"name":"sine","qualname":"<Hz<S>>::sine","value":"fn (self) -> Sine<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::sine` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::sine` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53835,"byte_end":53895,"line_start":1830,"line_end":1830,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53900,"byte_end":53909,"line_start":1831,"line_end":1831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54072,"byte_end":54075,"line_start":1838,"line_end":1838,"column_start":12,"column_end":15},"name":"saw","qualname":"<Hz<S>>::saw","value":"fn (self) -> Saw<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::saw` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::saw` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53987,"byte_end":54046,"line_start":1836,"line_end":1836,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54051,"byte_end":54060,"line_start":1837,"line_end":1837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54223,"byte_end":54229,"line_start":1844,"line_end":1844,"column_start":12,"column_end":18},"name":"square","qualname":"<Hz<S>>::square","value":"fn (self) -> Square<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::square` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::square` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54135,"byte_end":54197,"line_start":1842,"line_end":1842,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54202,"byte_end":54211,"line_start":1843,"line_end":1843,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54390,"byte_end":54403,"line_start":1850,"line_end":1850,"column_start":12,"column_end":25},"name":"noise_simplex","qualname":"<Hz<S>>::noise_simplex","value":"fn (self) -> NoiseSimplex<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::noise_simplex` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::noise_simplex` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54295,"byte_end":54364,"line_start":1848,"line_end":1848,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54369,"byte_end":54378,"line_start":1849,"line_end":1849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54618,"byte_end":54623,"line_start":1858,"line_end":1858,"column_start":12,"column_end":17},"name":"phase","qualname":"<ConstHz>::phase","value":"fn (self) -> Phase<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Phase` iterator that is incremented via the constant step size, `self.step`.\n","sig":null,"attributes":[{"value":"/ Construct a `Phase` iterator that is incremented via the constant step size, `self.step`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54499,"byte_end":54592,"line_start":1856,"line_end":1856,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54597,"byte_end":54606,"line_start":1857,"line_end":1857,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54764,"byte_end":54768,"line_start":1864,"line_end":1864,"column_start":12,"column_end":16},"name":"sine","qualname":"<ConstHz>::sine","value":"fn (self) -> Sine<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::sine` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::sine` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54678,"byte_end":54738,"line_start":1862,"line_end":1862,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54743,"byte_end":54752,"line_start":1863,"line_end":1863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54915,"byte_end":54918,"line_start":1870,"line_end":1870,"column_start":12,"column_end":15},"name":"saw","qualname":"<ConstHz>::saw","value":"fn (self) -> Saw<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::saw` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::saw` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54830,"byte_end":54889,"line_start":1868,"line_end":1868,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54894,"byte_end":54903,"line_start":1869,"line_end":1869,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55066,"byte_end":55072,"line_start":1876,"line_end":1876,"column_start":12,"column_end":18},"name":"square","qualname":"<ConstHz>::square","value":"fn (self) -> Square<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::square` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::square` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54978,"byte_end":55040,"line_start":1874,"line_end":1874,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55045,"byte_end":55054,"line_start":1875,"line_end":1875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55233,"byte_end":55246,"line_start":1882,"line_end":1882,"column_start":12,"column_end":25},"name":"noise_simplex","qualname":"<ConstHz>::noise_simplex","value":"fn (self) -> NoiseSimplex<Self>","parent":null,"children":[],"decl_id":null,"docs":" A composable alternative to the `signal::noise_simplex` function.\n","sig":null,"attributes":[{"value":"/ A composable alternative to the `signal::noise_simplex` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55138,"byte_end":55207,"line_start":1880,"line_end":1880,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55212,"byte_end":55221,"line_start":1881,"line_end":1881,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":217},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55657,"byte_end":55661,"line_start":1893,"line_end":1893,"column_start":11,"column_end":15},"name":"Step","qualname":"::Step","value":"Step","parent":null,"children":[{"krate":0,"index":218}],"decl_id":null,"docs":" Types that may be used to give a phase step size based on some `hz / sample rate`.","sig":null,"attributes":[{"value":"/ Types that may be used to give a phase step size based on some `hz / sample rate`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55323,"byte_end":55409,"line_start":1887,"line_end":1887,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55410,"byte_end":55413,"line_start":1888,"line_end":1888,"column_start":1,"column_end":4}},{"value":"/ This allows the `Phase` to be generic over either `ConstHz` and `Hz<I>`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55414,"byte_end":55490,"line_start":1889,"line_end":1889,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55491,"byte_end":55494,"line_start":1890,"line_end":1890,"column_start":1,"column_end":4}},{"value":"/ Generally, users need not be concerned with this trait unless writing code that must remain","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55495,"byte_end":55590,"line_start":1891,"line_end":1891,"column_start":1,"column_end":96}},{"value":"/ generic over phase stepping types like oscillators.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55591,"byte_end":55646,"line_start":1892,"line_end":1892,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55843,"byte_end":55847,"line_start":1897,"line_end":1897,"column_start":8,"column_end":12},"name":"step","qualname":"::Step::step","value":"fn (&mut self) -> f64","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Yield the phase step size (normally `hz / sampling rate`).","sig":null,"attributes":[{"value":"/ Yield the phase step size (normally `hz / sampling rate`).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55668,"byte_end":55730,"line_start":1894,"line_end":1894,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55735,"byte_end":55738,"line_start":1895,"line_end":1895,"column_start":5,"column_end":8}},{"value":"/ The `Phase` calls this and uses the returned value to step forward its internal `phase`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55743,"byte_end":55835,"line_start":1896,"line_end":1896,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56325,"byte_end":56346,"line_start":1925,"line_end":1925,"column_start":12,"column_end":33},"name":"next_phase_wrapped_to","qualname":"<Phase<S>>::next_phase_wrapped_to","value":"fn (&mut self, rem: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Before yielding the current phase, the internal phase is stepped forward and wrapped via\n the given value.\n","sig":null,"attributes":[{"value":"/ Before yielding the current phase, the internal phase is stepped forward and wrapped via","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56182,"byte_end":56274,"line_start":1922,"line_end":1922,"column_start":5,"column_end":97}},{"value":"/ the given value.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56279,"byte_end":56299,"line_start":1923,"line_end":1923,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56304,"byte_end":56313,"line_start":1924,"line_end":1924,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56583,"byte_end":56593,"line_start":1933,"line_end":1933,"column_start":12,"column_end":22},"name":"next_phase","qualname":"<Phase<S>>::next_phase","value":"fn (&mut self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calls `next_phase_wrapped_to`, with a wrapping value of `1.0`.\n","sig":null,"attributes":[{"value":"/ Calls `next_phase_wrapped_to`, with a wrapping value of `1.0`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56491,"byte_end":56557,"line_start":1931,"line_end":1931,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56562,"byte_end":56571,"line_start":1932,"line_end":1932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56747,"byte_end":56751,"line_start":1939,"line_end":1939,"column_start":12,"column_end":16},"name":"sine","qualname":"<Phase<S>>::sine","value":"fn (self) -> Sine<S>","parent":null,"children":[],"decl_id":null,"docs":" A composable version of the `signal::sine` function.\n","sig":null,"attributes":[{"value":"/ A composable version of the `signal::sine` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56665,"byte_end":56721,"line_start":1937,"line_end":1937,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56726,"byte_end":56735,"line_start":1938,"line_end":1938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56882,"byte_end":56885,"line_start":1945,"line_end":1945,"column_start":12,"column_end":15},"name":"saw","qualname":"<Phase<S>>::saw","value":"fn (self) -> Saw<S>","parent":null,"children":[],"decl_id":null,"docs":" A composable version of the `signal::saw` function.\n","sig":null,"attributes":[{"value":"/ A composable version of the `signal::saw` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56801,"byte_end":56856,"line_start":1943,"line_end":1943,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56861,"byte_end":56870,"line_start":1944,"line_end":1944,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57017,"byte_end":57023,"line_start":1951,"line_end":1951,"column_start":12,"column_end":18},"name":"square","qualname":"<Phase<S>>::square","value":"fn (self) -> Square<S>","parent":null,"children":[],"decl_id":null,"docs":" A composable version of the `signal::square` function.\n","sig":null,"attributes":[{"value":"/ A composable version of the `signal::square` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56933,"byte_end":56991,"line_start":1949,"line_end":1949,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56996,"byte_end":57005,"line_start":1950,"line_end":1950,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57168,"byte_end":57181,"line_start":1957,"line_end":1957,"column_start":12,"column_end":25},"name":"noise_simplex","qualname":"<Phase<S>>::noise_simplex","value":"fn (self) -> NoiseSimplex<S>","parent":null,"children":[],"decl_id":null,"docs":" A composable version of the `signal::noise_simplex` function.\n","sig":null,"attributes":[{"value":"/ A composable version of the `signal::noise_simplex` function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57077,"byte_end":57142,"line_start":1955,"line_end":1955,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57147,"byte_end":57156,"line_start":1956,"line_end":1956,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57284,"byte_end":57295,"line_start":1964,"line_end":1964,"column_start":12,"column_end":23},"name":"next_sample","qualname":"<Noise>::next_sample","value":"fn (&mut self) -> f64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57263,"byte_end":57272,"line_start":1963,"line_end":1963,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":58421,"byte_end":58432,"line_start":2005,"line_end":2005,"column_start":12,"column_end":23},"name":"next_sample","qualname":"<NoiseSimplex<S>>::next_sample","value":"fn (&mut self) -> f64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":58400,"byte_end":58409,"line_start":2004,"line_end":2004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66615,"byte_end":66626,"line_start":2290,"line_end":2290,"column_start":12,"column_end":23},"name":"next_sample","qualname":"<IntoInterleavedSamples<S>>::next_sample","value":"fn (&mut self) -> <S::Frame as Frame>::Sample","parent":null,"children":[],"decl_id":null,"docs":" Yield the next interleaved sample from the inner `Signal`.\n","sig":null,"attributes":[{"value":"/ Yield the next interleaved sample from the inner `Signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66527,"byte_end":66589,"line_start":2288,"line_end":2288,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66594,"byte_end":66603,"line_start":2289,"line_end":2289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66976,"byte_end":66985,"line_start":2301,"line_end":2301,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IntoInterleavedSamples<S>>::into_iter","value":"fn (self) -> IntoInterleavedSamplesIterator<S>","parent":null,"children":[],"decl_id":null,"docs":" Convert the `ToInterleavedSamples` into an `Iterator`.\n","sig":null,"attributes":[{"value":"/ Convert the `ToInterleavedSamples` into an `Iterator`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66892,"byte_end":66950,"line_start":2299,"line_end":2299,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66955,"byte_end":66964,"line_start":2300,"line_end":2300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70432,"byte_end":70443,"line_start":2442,"line_end":2442,"column_start":12,"column_end":23},"name":"next_frames","qualname":"<Buffered<S, D>>::next_frames","value":"fn (&mut self) -> BufferedFrames<D>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator yielding the next batch of buffered frames.","sig":null,"attributes":[{"value":"/ Produces an iterator yielding the next batch of buffered frames.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69368,"byte_end":69436,"line_start":2421,"line_end":2421,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69441,"byte_end":69444,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ The returned iterator returns `None` once the inner ring buffer becomes exhausted.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69449,"byte_end":69535,"line_start":2423,"line_end":2423,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69540,"byte_end":69543,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ If the inner ring buffer is empty when this method is called, the ring buffer will first be","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69548,"byte_end":69643,"line_start":2425,"line_end":2425,"column_start":5,"column_end":100}},{"value":"/ filled using `Buffered`'s inner `signal` before `BufferedFrames` is returned.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69648,"byte_end":69729,"line_start":2426,"line_end":2426,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69734,"byte_end":69737,"line_start":2427,"line_end":2427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69742,"byte_end":69749,"line_start":2428,"line_end":2428,"column_start":5,"column_end":12}},{"value":"/ use dasp_ring_buffer as ring_buffer;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69754,"byte_end":69794,"line_start":2429,"line_end":2429,"column_start":5,"column_end":45}},{"value":"/ use dasp_signal::{self as signal, Signal};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69799,"byte_end":69845,"line_start":2430,"line_end":2430,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69850,"byte_end":69853,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69858,"byte_end":69873,"line_start":2432,"line_end":2432,"column_start":5,"column_end":20}},{"value":"/     let frames = [0.1, 0.2, 0.3, 0.4];","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69878,"byte_end":69920,"line_start":2433,"line_end":2433,"column_start":5,"column_end":47}},{"value":"/     let signal = signal::from_iter(frames.iter().cloned());","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69925,"byte_end":69988,"line_start":2434,"line_end":2434,"column_start":5,"column_end":68}},{"value":"/     let ring_buffer = ring_buffer::Bounded::from([0f32; 2]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69993,"byte_end":70057,"line_start":2435,"line_end":2435,"column_start":5,"column_end":69}},{"value":"/     let mut buffered_signal = signal.buffered(ring_buffer);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70062,"byte_end":70125,"line_start":2436,"line_end":2436,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(buffered_signal.next_frames().collect::<Vec<_>>(), vec![0.1, 0.2]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70130,"byte_end":70216,"line_start":2437,"line_end":2437,"column_start":5,"column_end":91}},{"value":"/     assert_eq!(buffered_signal.next_frames().collect::<Vec<_>>(), vec![0.3, 0.4]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70221,"byte_end":70307,"line_start":2438,"line_end":2438,"column_start":5,"column_end":91}},{"value":"/     assert_eq!(buffered_signal.next_frames().collect::<Vec<_>>(), vec![0.0, 0.0]);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70312,"byte_end":70398,"line_start":2439,"line_end":2439,"column_start":5,"column_end":91}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70403,"byte_end":70408,"line_start":2440,"line_end":2440,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70413,"byte_end":70420,"line_start":2441,"line_end":2441,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70926,"byte_end":70936,"line_start":2458,"line_end":2458,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<Buffered<S, D>>::into_parts","value":"fn (self) -> (S, ring_buffer::Bounded<D>)","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Buffered` signal and returns its inner signal `S` and bounded ring buffer.\n","sig":null,"attributes":[{"value":"/ Consumes the `Buffered` signal and returns its inner signal `S` and bounded ring buffer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":70822,"byte_end":70914,"line_start":2457,"line_end":2457,"column_start":5,"column_end":97}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72696,"byte_end":72705,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75910,"byte_end":75919,"line_start":115,"line_end":115,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35221,"byte_end":35225,"line_start":1103,"line_end":1103,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":49167,"byte_end":49179,"line_start":1580,"line_end":1580,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":49620,"byte_end":49650,"line_start":1604,"line_end":1604,"column_start":23,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50132,"byte_end":50143,"line_start":1629,"line_end":1629,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50298,"byte_end":50301,"line_start":1641,"line_end":1641,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50475,"byte_end":50481,"line_start":1654,"line_end":1654,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50665,"byte_end":50668,"line_start":1667,"line_end":1667,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50974,"byte_end":50980,"line_start":1685,"line_end":1685,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51349,"byte_end":51351,"line_start":1704,"line_end":1704,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51602,"byte_end":51609,"line_start":1721,"line_end":1721,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51737,"byte_end":51742,"line_start":1730,"line_end":1730,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51898,"byte_end":51902,"line_start":1742,"line_end":1742,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52168,"byte_end":52171,"line_start":1756,"line_end":1756,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52373,"byte_end":52379,"line_start":1769,"line_end":1769,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52625,"byte_end":52629,"line_start":1786,"line_end":1786,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53568,"byte_end":53570,"line_start":1819,"line_end":1819,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54485,"byte_end":54492,"line_start":1855,"line_end":1855,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55884,"byte_end":55891,"line_start":1900,"line_end":1900,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55984,"byte_end":55986,"line_start":1907,"line_end":1907,"column_start":18,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56148,"byte_end":56153,"line_start":1918,"line_end":1918,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57251,"byte_end":57256,"line_start":1962,"line_end":1962,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":58231,"byte_end":58236,"line_start":1992,"line_end":1992,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":58359,"byte_end":58371,"line_start":2000,"line_end":2000,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":62622,"byte_end":62634,"line_start":2088,"line_end":2088,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":62794,"byte_end":62800,"line_start":2100,"line_end":2100,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":63266,"byte_end":63272,"line_start":2122,"line_end":2122,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":63734,"byte_end":63742,"line_start":2144,"line_end":2144,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":64022,"byte_end":64040,"line_start":2161,"line_end":2161,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":64466,"byte_end":64475,"line_start":2182,"line_end":2182,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":64759,"byte_end":64778,"line_start":2199,"line_end":2199,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":65211,"byte_end":65216,"line_start":2220,"line_end":2220,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":65722,"byte_end":65727,"line_start":2242,"line_end":2242,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66140,"byte_end":66147,"line_start":2264,"line_end":2264,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66474,"byte_end":66496,"line_start":2284,"line_end":2284,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67118,"byte_end":67148,"line_start":2306,"line_end":2306,"column_start":22,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67353,"byte_end":67367,"line_start":2318,"line_end":2318,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67616,"byte_end":67638,"line_start":2332,"line_end":2332,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67925,"byte_end":67955,"line_start":2346,"line_end":2346,"column_start":19,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":68186,"byte_end":68193,"line_start":2359,"line_end":2359,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":68785,"byte_end":68789,"line_start":2387,"line_end":2387,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69146,"byte_end":69150,"line_start":2406,"line_end":2406,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69255,"byte_end":69263,"line_start":2416,"line_end":2416,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":71124,"byte_end":71132,"line_start":2467,"line_end":2467,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":71849,"byte_end":71863,"line_start":2496,"line_end":2496,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":2753,"byte_end":2764,"line_start":57,"line_end":57,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":12}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":72696,"byte_end":72705,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/interpolate.rs","byte_start":75910,"byte_end":75919,"line_start":115,"line_end":115,"column_start":23,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":354},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":35221,"byte_end":35225,"line_start":1103,"line_end":1103,"column_start":12,"column_end":16},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":49167,"byte_end":49179,"line_start":1580,"line_end":1580,"column_start":20,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":416},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":49620,"byte_end":49650,"line_start":1604,"line_end":1604,"column_start":23,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":423},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50132,"byte_end":50143,"line_start":1629,"line_end":1629,"column_start":20,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":365},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50298,"byte_end":50301,"line_start":1641,"line_end":1641,"column_start":23,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":371},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50475,"byte_end":50481,"line_start":1654,"line_end":1654,"column_start":23,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":380},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50665,"byte_end":50668,"line_start":1667,"line_end":1667,"column_start":26,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":389},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":50974,"byte_end":50980,"line_start":1685,"line_end":1685,"column_start":29,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":401},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51349,"byte_end":51351,"line_start":1704,"line_end":1704,"column_start":20,"column_end":22},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51602,"byte_end":51609,"line_start":1721,"line_end":1721,"column_start":17,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":443},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51737,"byte_end":51742,"line_start":1730,"line_end":1730,"column_start":20,"column_end":25},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":454},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":51898,"byte_end":51902,"line_start":1742,"line_end":1742,"column_start":20,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":461},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52168,"byte_end":52171,"line_start":1756,"line_end":1756,"column_start":20,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":467},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52373,"byte_end":52379,"line_start":1769,"line_end":1769,"column_start":20,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":473},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":52625,"byte_end":52629,"line_start":1786,"line_end":1786,"column_start":6,"column_end":10},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":53568,"byte_end":53570,"line_start":1819,"line_end":1819,"column_start":9,"column_end":11},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":54485,"byte_end":54492,"line_start":1855,"line_end":1855,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55884,"byte_end":55891,"line_start":1900,"line_end":1900,"column_start":15,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":443},"to":{"krate":0,"index":217}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":55984,"byte_end":55986,"line_start":1907,"line_end":1907,"column_start":18,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":447},"to":{"krate":0,"index":217}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":56148,"byte_end":56153,"line_start":1918,"line_end":1918,"column_start":9,"column_end":14},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":57251,"byte_end":57256,"line_start":1962,"line_end":1962,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":58231,"byte_end":58236,"line_start":1992,"line_end":1992,"column_start":17,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":479},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":58359,"byte_end":58371,"line_start":2000,"line_end":2000,"column_start":9,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":62622,"byte_end":62634,"line_start":2088,"line_end":2088,"column_start":20,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":483},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":62794,"byte_end":62800,"line_start":2100,"line_end":2100,"column_start":23,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":489},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":63266,"byte_end":63272,"line_start":2122,"line_end":2122,"column_start":23,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":498},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":63734,"byte_end":63742,"line_start":2144,"line_end":2144,"column_start":20,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":514},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":64022,"byte_end":64040,"line_start":2161,"line_end":2161,"column_start":23,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":530},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":64466,"byte_end":64475,"line_start":2182,"line_end":2182,"column_start":20,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":507},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":64759,"byte_end":64778,"line_start":2199,"line_end":2199,"column_start":23,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":521},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":65211,"byte_end":65216,"line_start":2220,"line_end":2220,"column_start":26,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":539},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":65722,"byte_end":65727,"line_start":2242,"line_end":2242,"column_start":20,"column_end":25},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":550},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66140,"byte_end":66147,"line_start":2264,"line_end":2264,"column_start":23,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":557},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":66474,"byte_end":66496,"line_start":2284,"line_end":2284,"column_start":9,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67118,"byte_end":67148,"line_start":2306,"line_end":2306,"column_start":22,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":89},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67353,"byte_end":67367,"line_start":2318,"line_end":2318,"column_start":22,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":566},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67616,"byte_end":67638,"line_start":2332,"line_end":2332,"column_start":19,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":85},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":67925,"byte_end":67955,"line_start":2346,"line_end":2346,"column_start":19,"column_end":49},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":89},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":68186,"byte_end":68193,"line_start":2359,"line_end":2359,"column_start":20,"column_end":27},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":572},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":68785,"byte_end":68789,"line_start":2387,"line_end":2387,"column_start":22,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":655},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69146,"byte_end":69150,"line_start":2406,"line_end":2406,"column_start":31,"column_end":35},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":655},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":69255,"byte_end":69263,"line_start":2416,"line_end":2416,"column_start":12,"column_end":20},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":71124,"byte_end":71132,"line_start":2467,"line_end":2467,"column_start":23,"column_end":31},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":662},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_signal-0.11.0/src/lib.rs","byte_start":71849,"byte_end":71863,"line_start":2496,"line_end":2496,"column_start":26,"column_end":40},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":100},"to":{"krate":2,"index":4716}}]}