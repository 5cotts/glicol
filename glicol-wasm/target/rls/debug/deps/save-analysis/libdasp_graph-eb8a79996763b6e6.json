{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0","program":"/Users/chaosprint/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","dasp_graph","--edition=2018","/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"all-nodes\"","--cfg","feature=\"dasp_frame\"","--cfg","feature=\"dasp_ring_buffer\"","--cfg","feature=\"dasp_signal\"","--cfg","feature=\"dasp_slice\"","--cfg","feature=\"default\"","--cfg","feature=\"node-boxed\"","--cfg","feature=\"node-delay\"","--cfg","feature=\"node-graph\"","--cfg","feature=\"node-pass\"","--cfg","feature=\"node-signal\"","--cfg","feature=\"node-sum\"","-C","metadata=eb8a79996763b6e6","-C","extra-filename=-eb8a79996763b6e6","--out-dir","/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps","-L","dependency=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps","--extern","dasp_frame=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_frame-fa325a60773f21d8.rmeta","--extern","dasp_ring_buffer=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_ring_buffer-12b92e79e8724045.rmeta","--extern","dasp_signal=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_signal-1f4a7f7cb7cbcee3.rmeta","--extern","dasp_slice=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_slice-7a7462047c0b2715.rmeta","--extern","petgraph=/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libpetgraph-42ec0197c4b39475.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/chaosprint/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/chaosprint/Dev/glicol-wasm/target/rls/debug/deps/libdasp_graph-eb8a79996763b6e6.rmeta"},"prelude":{"crate_id":{"name":"dasp_graph","disambiguator":[3889309609187525298,9663099431595462356]},"crate_root":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src","external_crates":[{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9606925100264359032,12531971508192552739]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","num":2,"id":{"name":"core","disambiguator":[17187672715010298091,8744209918715530773]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15887813922859449425,14244592339943736272]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6807992320260993406,9894278173044996986]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17858480672457447890,14967053264370168355]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1320274826319993033,12580344779796895143]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5371179889215182298,2673167689761608764]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3578723082929147264,11802062942665263000]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12064590987128239469,16657797211233097221]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[9585105124653066898,10355053755662228341]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[168442059660610991,16640229565854074068]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13744766486950275495,4356178648036430150]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4695427281829409190,666464352563047434]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[825342386373460966,7285997970727292365]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":15,"id":{"name":"petgraph","disambiguator":[14075076525062117360,664265563237897593]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":16,"id":{"name":"fixedbitset","disambiguator":[7481125775853698362,6302371158894803999]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":17,"id":{"name":"indexmap","disambiguator":[788818397300168196,14918107145153978386]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","num":18,"id":{"name":"hashbrown","disambiguator":[3168012621487929834,2559872505762589375]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","num":19,"id":{"name":"dasp_ring_buffer","disambiguator":[16401509384445664778,14337884719814784892]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/signal.rs","num":20,"id":{"name":"dasp_frame","disambiguator":[1581612173861956889,5984927822764315227]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/signal.rs","num":21,"id":{"name":"dasp_sample","disambiguator":[6408490087116748643,9102689448921963525]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/signal.rs","num":22,"id":{"name":"dasp_signal","disambiguator":[6996685705614709795,5257928466816614616]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/signal.rs","num":23,"id":{"name":"dasp_interpolate","disambiguator":[10868034933050101286,14250785113738949845]}},{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","num":24,"id":{"name":"dasp_slice","disambiguator":[6031979396062463861,16415149694212081907]}}],"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":0,"byte_end":17092,"line_start":1,"line_end":374,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7916,"byte_end":7922,"line_start":126,"line_end":126,"column_start":17,"column_end":23},"alias_span":null,"name":"Buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":175},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7939,"byte_end":7944,"line_start":127,"line_end":127,"column_start":16,"column_end":21},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":173},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7946,"byte_end":7950,"line_start":127,"line_end":127,"column_start":23,"column_end":27},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8214,"byte_end":8223,"line_start":136,"line_end":136,"column_start":16,"column_end":25},"alias_span":null,"name":"BoxedNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8225,"byte_end":8238,"line_start":136,"line_end":136,"column_start":27,"column_end":40},"alias_span":null,"name":"BoxedNodeSend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18397,"byte_end":18406,"line_start":5,"line_end":5,"column_start":17,"column_end":26},"alias_span":null,"name":"BoxedNode","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18408,"byte_end":18421,"line_start":5,"line_end":5,"column_start":28,"column_end":41},"alias_span":null,"name":"BoxedNodeSend","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18470,"byte_end":18475,"line_start":7,"line_end":7,"column_start":16,"column_end":21},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18523,"byte_end":18532,"line_start":9,"line_end":9,"column_start":16,"column_end":25},"alias_span":null,"name":"GraphNode","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18578,"byte_end":18582,"line_start":11,"line_end":11,"column_start":15,"column_end":19},"alias_span":null,"name":"Pass","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18627,"byte_end":18630,"line_start":13,"line_end":13,"column_start":15,"column_end":18},"alias_span":null,"name":"Sum","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18632,"byte_end":18642,"line_start":13,"line_end":13,"column_start":20,"column_end":30},"alias_span":null,"name":"SumBuffers","value":"","parent":{"krate":0,"index":50}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":0,"byte_end":17092,"line_start":1,"line_end":374,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":50},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":211},{"krate":0,"index":216},{"krate":0,"index":223},{"krate":0,"index":228},{"krate":0,"index":234}],"decl_id":null,"docs":" A crate for dynamically creating and editing audio graphs.","sig":null,"attributes":[{"value":"! A crate for dynamically creating and editing audio graphs.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":63,"byte_end":66,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! `dasp_graph` is targeted towards users who require an efficient yet flexible and dynamically","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":67,"byte_end":163,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"! configurable audio graph. Use cases might include virtual mixers, digital audio workstations,","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":164,"byte_end":261,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"! game audio systems, virtual modular synthesizers and more.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":262,"byte_end":324,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":325,"byte_end":328,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Overview","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":329,"byte_end":343,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":344,"byte_end":347,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! A `dasp` graph is composed of **nodes** and **edges**.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":348,"byte_end":406,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":407,"byte_end":410,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Each node contains an instance of a type that implements the [`Node`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":411,"byte_end":483,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"! trait](./node/trait.Node.html). This is normally an audio source (input), processor (effect) or","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":484,"byte_end":583,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"! sink (output). The `Node` trait is the core abstraction of `dasp_graph` and allows for trivial","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":584,"byte_end":682,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"! re-use of audio nodes between projects and libraries. By implementing `Node` for your audio","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":683,"byte_end":778,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"! instruments, effects, generators and processors, they can be easily composed together within a","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":779,"byte_end":877,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"! graph and shared with future projects or other `dasp` users. `dasp_graph` provides a suite of","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":878,"byte_end":975,"line_start":16,"line_end":16,"column_start":1,"column_end":98}},{"value":"! popular node implementations out of the box, each of which may be accessed by enabling [their","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":976,"byte_end":1073,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"! associated features](./index.html#optional-features).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1074,"byte_end":1131,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1132,"byte_end":1135,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! The edges of a `dasp` graph are empty and simply describe the direction of audio flow","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1136,"byte_end":1225,"line_start":20,"line_end":20,"column_start":1,"column_end":90}},{"value":"! through the graph. That is, the edge *a -> b* describes that the audio output of node *a* will","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1226,"byte_end":1324,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"! be used as an input to node *b*.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1325,"byte_end":1361,"line_start":22,"line_end":22,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1362,"byte_end":1365,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! Once we have added our nodes and edges describing the flow of audio through our graph, we can","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1366,"byte_end":1463,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"! repeatedly process and retrieve audio from it using the [`Processor`](./struct.Processor.html)","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1464,"byte_end":1562,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"! type.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1563,"byte_end":1572,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1573,"byte_end":1576,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! # Comparison to `dasp_signal`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1577,"byte_end":1610,"line_start":28,"line_end":28,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1611,"byte_end":1614,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! While [`dasp_signal`](https://docs.rs/dasp_signal) and its [`Signal`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1615,"byte_end":1687,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"! trait](https://docs.rs/dasp_signal/latest/dasp_signal/trait.Signal.html) are already well","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1688,"byte_end":1781,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"! suited towards composing audio graphs, there are certain use cases where they can cause","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1782,"byte_end":1873,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"! friction. Use cases that require dynamically adding or removing nodes, mapping between","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1874,"byte_end":1964,"line_start":33,"line_end":33,"column_start":1,"column_end":91}},{"value":"! dynamically changing channel layouts, or writing the output of one node to multiple others are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":1965,"byte_end":2063,"line_start":34,"line_end":34,"column_start":1,"column_end":99}},{"value":"! all difficult to achieve in an elegant manner using `dasp_signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2064,"byte_end":2134,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2135,"byte_end":2138,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! `dasp_graph` is designed in a manner that better handles these cases. The flat ownership model","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2139,"byte_end":2237,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"! where the graph owns all nodes makes it trivial to add or remove nodes and edges at runtime.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2238,"byte_end":2334,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"! Nodes can specify the number of buffers that they support during construction, making it easy","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2335,"byte_end":2432,"line_start":39,"line_end":39,"column_start":1,"column_end":98}},{"value":"! to handle different channel layouts. Adding multiple outputs to a node (including predecessors","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2433,"byte_end":2531,"line_start":40,"line_end":40,"column_start":1,"column_end":99}},{"value":"! to enable cycles) is trivial due to `dasp_graph`'s requirement for a fixed sample rate across","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2532,"byte_end":2629,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"! the whole graph.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2630,"byte_end":2650,"line_start":42,"line_end":42,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2651,"byte_end":2654,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! On the other hand, `dasp_graph`'s requirement for a fixed sample rate can also be a limitation.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2655,"byte_end":2754,"line_start":44,"line_end":44,"column_start":1,"column_end":100}},{"value":"! A `dasp_graph` cannot be composed of nodes with differing input sample rates meaning it is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2755,"byte_end":2849,"line_start":45,"line_end":45,"column_start":1,"column_end":95}},{"value":"! unsuitable for writing a streaming sample rate converter. `dasp_graph`'s fixed buffer size","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2850,"byte_end":2944,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"! results in another limitation. It implies that when creating a cycle within the graph, a","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":2945,"byte_end":3037,"line_start":47,"line_end":47,"column_start":1,"column_end":93}},{"value":"! minimum delay of `Buffer::LEN` is incurred at the edge causing the cycle. This makes it","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3038,"byte_end":3129,"line_start":48,"line_end":48,"column_start":1,"column_end":92}},{"value":"! tricky to compose per-sample feedback delays by using cycles in the graph.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3130,"byte_end":3208,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3209,"byte_end":3212,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! | Feature                                           | `dasp_graph`  | `dasp_signal` |","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3213,"byte_end":3302,"line_start":51,"line_end":51,"column_start":1,"column_end":90}},{"value":"! | ------------------------------------------------- |:-------------:|:-------------:|","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3303,"byte_end":3392,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"! | Easily dynamically add/remove nodes/edges         | ✓             | ✗             |","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3393,"byte_end":3486,"line_start":53,"line_end":53,"column_start":1,"column_end":90}},{"value":"! | Easily write output of node to multiple others    | ✓             | ✗             |","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3487,"byte_end":3580,"line_start":54,"line_end":54,"column_start":1,"column_end":90}},{"value":"! | Dynamic channel layout                            | ✓             | ✗             |","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3581,"byte_end":3674,"line_start":55,"line_end":55,"column_start":1,"column_end":90}},{"value":"! | Efficiently implement per-sample feedback         | ✗             | ✓             |","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3675,"byte_end":3768,"line_start":56,"line_end":56,"column_start":1,"column_end":90}},{"value":"! | Support variable input sample rate per node       | ✗             | ✓             |","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3769,"byte_end":3862,"line_start":57,"line_end":57,"column_start":1,"column_end":90}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3863,"byte_end":3866,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! In general, `dasp_signal` tends to be better suited towards the composition of fixed or static","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3867,"byte_end":3965,"line_start":59,"line_end":59,"column_start":1,"column_end":99}},{"value":"! graphs where the number of channels are known ahead of time. It is perfect for small, fixed,","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":3966,"byte_end":4062,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"! static graph structures like a simple standalone synthesizer/sampler or small","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4063,"byte_end":4144,"line_start":61,"line_end":61,"column_start":1,"column_end":82}},{"value":"! processors/effects like sample-rate converters or pitch shifters. `dasp_graph` on the other","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4145,"byte_end":4240,"line_start":62,"line_end":62,"column_start":1,"column_end":96}},{"value":"! hand is better suited at a higher level where flexibility is a priority, e.g. a virtual mixing","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4241,"byte_end":4339,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"! console or, the underlying graph for a digital audio workstation or a virtual modular","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4340,"byte_end":4429,"line_start":64,"line_end":64,"column_start":1,"column_end":90}},{"value":"! synthesizer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4430,"byte_end":4446,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4447,"byte_end":4450,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! Generally, it is likely that `dasp_signal` will be more useful for writing `Node`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4451,"byte_end":4536,"line_start":67,"line_end":67,"column_start":1,"column_end":86}},{"value":"! implementations for audio sources and effects, while `dasp_graph` will be well suited to","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4537,"byte_end":4629,"line_start":68,"line_end":68,"column_start":1,"column_end":93}},{"value":"! dynamically composing these nodes together in a flexible manner.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4630,"byte_end":4698,"line_start":69,"line_end":69,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4699,"byte_end":4702,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! # Graph types","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4703,"byte_end":4720,"line_start":71,"line_end":71,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4721,"byte_end":4724,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! Rather than providing a fixed type of graph to work with, `dasp_graph` utilises the `petgraph`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4725,"byte_end":4823,"line_start":73,"line_end":73,"column_start":1,"column_end":99}},{"value":"! traits to expose a generic interface allowing users to select the graph type that bests suits","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4824,"byte_end":4921,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"! their application or implement their own.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4922,"byte_end":4967,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4968,"byte_end":4971,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! **Graph**","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4972,"byte_end":4985,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4986,"byte_end":4989,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! The [`petgraph::graph::Graph`](https://docs.rs/petgraph/latest/petgraph/graph/struct.Graph.html)","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":4990,"byte_end":5090,"line_start":79,"line_end":79,"column_start":1,"column_end":101}},{"value":"! type is a standard graph type exposed by `petgraph`. The type is simply an interface around two","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5091,"byte_end":5190,"line_start":80,"line_end":80,"column_start":1,"column_end":100}},{"value":"! `Vec`s, one containing the nodes and one containing the edges.  Adding nodes returns a unique","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5191,"byte_end":5288,"line_start":81,"line_end":81,"column_start":1,"column_end":98}},{"value":"! identifier that can be used to index into the graph. As long as the graph is intialised with a","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5289,"byte_end":5387,"line_start":82,"line_end":82,"column_start":1,"column_end":99}},{"value":"! sufficient capacity for both `Vec`s, adding nodes while avoiding dynamic allocation is simple.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5388,"byte_end":5486,"line_start":83,"line_end":83,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5487,"byte_end":5490,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"! **StableGraph**","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5491,"byte_end":5510,"line_start":85,"line_end":85,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5511,"byte_end":5514,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"! One significant caveat with the `Graph` type is that removing a node invalidates any existing","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5515,"byte_end":5612,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"! indices that refer to the following nodes stored within the graph's node `Vec`. The","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5613,"byte_end":5700,"line_start":88,"line_end":88,"column_start":1,"column_end":88}},{"value":"! [`petgraph::stable_graph::StableGraph`](https://docs.rs/petgraph/latest/petgraph/stable_graph/struct.StableGraph.html)","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5701,"byte_end":5823,"line_start":89,"line_end":89,"column_start":1,"column_end":123}},{"value":"! type avoids this issue by storing each node in and enum.  When a node is \"removed\", the element","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5824,"byte_end":5923,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"! simply switches to a variant that indicates its slot is available for use the next time","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":5924,"byte_end":6015,"line_start":91,"line_end":91,"column_start":1,"column_end":92}},{"value":"! `add_node` is called.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6016,"byte_end":6041,"line_start":92,"line_end":92,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6042,"byte_end":6045,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! In summary, if you require the ability to dynamically remove nodes from your graph you should","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6046,"byte_end":6143,"line_start":94,"line_end":94,"column_start":1,"column_end":98}},{"value":"! prefer the `StableGraph` type. Otherwise, the `Graph` type is likely well suited.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6144,"byte_end":6229,"line_start":95,"line_end":95,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6230,"byte_end":6233,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"! If neither of these graphs fit your use case, consider implementing the necessary petgraph","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6234,"byte_end":6328,"line_start":97,"line_end":97,"column_start":1,"column_end":95}},{"value":"! traits for your own graph type. You can find the necessary traits by checking the trait bounds","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6329,"byte_end":6427,"line_start":98,"line_end":98,"column_start":1,"column_end":99}},{"value":"! on the graph argument to the `dasp_graph` functions you intend to use.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6428,"byte_end":6502,"line_start":99,"line_end":99,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6503,"byte_end":6506,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"! # Optional Features","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6507,"byte_end":6530,"line_start":101,"line_end":101,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6531,"byte_end":6534,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"! Each of the provided node implementations are available by default, however these may be","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6535,"byte_end":6627,"line_start":103,"line_end":103,"column_start":1,"column_end":93}},{"value":"! disabled by disabling default features. You can then enable only the implementations you","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6628,"byte_end":6720,"line_start":104,"line_end":104,"column_start":1,"column_end":93}},{"value":"! require with the following features:","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6721,"byte_end":6761,"line_start":105,"line_end":105,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6762,"byte_end":6765,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! - The **node-boxed** feature provides a `Node` implementation for `Box<dyn Node>`. This is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6766,"byte_end":6860,"line_start":107,"line_end":107,"column_start":1,"column_end":95}},{"value":"!   particularly useful for working with a graph composed of many different node types.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6861,"byte_end":6950,"line_start":108,"line_end":108,"column_start":1,"column_end":90}},{"value":"! - The **node-graph** feature provides an implementation of `Node` for a type that encapsulates","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":6951,"byte_end":7049,"line_start":109,"line_end":109,"column_start":1,"column_end":99}},{"value":"!   another `dasp` graph type. This allows for composing individual nodes from graphs of other","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7050,"byte_end":7146,"line_start":110,"line_end":110,"column_start":1,"column_end":97}},{"value":"!   nodes.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7147,"byte_end":7159,"line_start":111,"line_end":111,"column_start":1,"column_end":13}},{"value":"! - The **node-signal** feature provides an implementation of `Node` for `dyn Signal`. This is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7160,"byte_end":7256,"line_start":112,"line_end":112,"column_start":1,"column_end":97}},{"value":"!   useful when designing nodes using `dasp_signal`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7257,"byte_end":7311,"line_start":113,"line_end":113,"column_start":1,"column_end":55}},{"value":"! - The **node-delay** feature provides a simple multi-channel `Delay` node.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7312,"byte_end":7390,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"! - The **node-pass** feature provides a `Pass` node that simply passes audio from its","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7391,"byte_end":7479,"line_start":115,"line_end":115,"column_start":1,"column_end":89}},{"value":"!   inputs to its outputs.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7480,"byte_end":7508,"line_start":116,"line_end":116,"column_start":1,"column_end":29}},{"value":"! - The **node-sum** feature provides `Sum` and `SumBuffers` `Node` implementations. These are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7509,"byte_end":7605,"line_start":117,"line_end":117,"column_start":1,"column_end":97}},{"value":"!   useful for mixing together multiple inputs, and for simple mappings between different channel","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7606,"byte_end":7705,"line_start":118,"line_end":118,"column_start":1,"column_end":100}},{"value":"!   layouts.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7706,"byte_end":7720,"line_start":119,"line_end":119,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7721,"byte_end":7724,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"! ### no_std","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7725,"byte_end":7739,"line_start":121,"line_end":121,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7740,"byte_end":7743,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"! *TODO: Adding support for `no_std` is pending the addition of support for `no_std` in petgraph.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7744,"byte_end":7843,"line_start":123,"line_end":123,"column_start":1,"column_end":100}},{"value":"! See https://github.com/petgraph/petgraph/pull/238.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":7844,"byte_end":7898,"line_start":124,"line_end":124,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17229,"byte_end":17235,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::buffer::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":241}],"decl_id":null,"docs":" The fixed-size buffer used for processing the graph.\n","sig":null,"attributes":[{"value":"/ The fixed-size buffer used for processing the graph.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17144,"byte_end":17200,"line_start":4,"line_end":4,"column_start":1,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":31},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17346,"byte_end":17349,"line_start":12,"line_end":12,"column_start":15,"column_end":18},"name":"LEN","qualname":"::buffer::Buffer::LEN","value":"usize","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" The fixed length of the **Buffer** type.\n","sig":null,"attributes":[{"value":"/ The fixed length of the **Buffer** type.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17287,"byte_end":17331,"line_start":11,"line_end":11,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":32},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17406,"byte_end":17412,"line_start":14,"line_end":14,"column_start":15,"column_end":21},"name":"SILENT","qualname":"::buffer::Buffer::SILENT","value":"Self","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" A silent **Buffer**.\n","sig":null,"attributes":[{"value":"/ A silent **Buffer**.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17367,"byte_end":17391,"line_start":13,"line_end":13,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17541,"byte_end":17548,"line_start":19,"line_end":19,"column_start":12,"column_end":19},"name":"silence","qualname":"<Buffer>::silence","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Short-hand for writing silence to the whole buffer.\n","sig":null,"attributes":[{"value":"/ Short-hand for writing silence to the whole buffer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17474,"byte_end":17529,"line_start":18,"line_end":18,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"node","qualname":"::node","value":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":111},{"krate":0,"index":120},{"krate":0,"index":147},{"krate":0,"index":154},{"krate":0,"index":164},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":71},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":23985,"byte_end":23994,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"BoxedNode","qualname":"::node::boxed::BoxedNode","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around a `Box<dyn Node>`.","sig":null,"attributes":[{"value":"/ A wrapper around a `Box<dyn Node>`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":23816,"byte_end":23855,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":23856,"byte_end":23859,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Provides the necessary `Sized` implementation to allow for compatibility with the graph process","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":23860,"byte_end":23959,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":23960,"byte_end":23973,"line_start":8,"line_end":8,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24404,"byte_end":24417,"line_start":19,"line_end":19,"column_start":12,"column_end":25},"name":"BoxedNodeSend","qualname":"::node::boxed::BoxedNodeSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around a `Box<dyn Node>`.","sig":null,"attributes":[{"value":"/ A wrapper around a `Box<dyn Node>`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24016,"byte_end":24055,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24056,"byte_end":24059,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Provides the necessary `Sized` implementation to allow for compatibility with the graph process","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24060,"byte_end":24159,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ function.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24160,"byte_end":24173,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24174,"byte_end":24177,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Useful when the ability to send nodes from one thread to another is required. E.g. this is","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24178,"byte_end":24272,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/ common when initialising nodes or the audio graph itself on one thread before sending them to","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24273,"byte_end":24370,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ the audio thread.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24371,"byte_end":24392,"line_start":18,"line_end":18,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24606,"byte_end":24609,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxedNode>::new","value":"fn <T> (node: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BoxedNode` around the given `node`.","sig":null,"attributes":[{"value":"/ Create a new `BoxedNode` around the given `node`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24467,"byte_end":24520,"line_start":22,"line_end":22,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24525,"byte_end":24528,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This is short-hand for `BoxedNode::from(Box::new(node))`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24533,"byte_end":24594,"line_start":24,"line_end":24,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24881,"byte_end":24884,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<BoxedNodeSend>::new","value":"fn <T> (node: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BoxedNode` around the given `node`.","sig":null,"attributes":[{"value":"/ Create a new `BoxedNode` around the given `node`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24742,"byte_end":24795,"line_start":34,"line_end":34,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24800,"byte_end":24803,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This is short-hand for `BoxedNode::from(Box::new(node))`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24808,"byte_end":24869,"line_start":36,"line_end":36,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":245},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":26997,"byte_end":27002,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Delay","qualname":"::node::delay::Delay","value":"","parent":null,"children":[],"decl_id":null,"docs":" A delay node, where the delay duration for each channel is equal to the length of the inner\n ring buffer associated with that channel.","sig":null,"attributes":[{"value":"/ A delay node, where the delay duration for each channel is equal to the length of the inner","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":26678,"byte_end":26773,"line_start":4,"line_end":4,"column_start":1,"column_end":96}},{"value":"/ ring buffer associated with that channel.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":26774,"byte_end":26819,"line_start":5,"line_end":5,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":26820,"byte_end":26823,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Assumes that there is one input node, and that the number of input buffers, output buffers and","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":26824,"byte_end":26922,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ ring buffers all match.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":26923,"byte_end":26950,"line_start":8,"line_end":8,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":27968,"byte_end":27977,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"GraphNode","qualname":"::node::graph::GraphNode","value":"GraphNode { processor, graph, input_nodes, output_node, node_type }","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":137},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28018,"byte_end":28027,"line_start":14,"line_end":14,"column_start":9,"column_end":18},"name":"processor","qualname":"::node::graph::GraphNode::processor","value":"Processor<G>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":138},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28051,"byte_end":28056,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"graph","qualname":"::node::graph::GraphNode::graph","value":"G","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":139},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28069,"byte_end":28080,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"name":"input_nodes","qualname":"::node::graph::GraphNode::input_nodes","value":"std::vec::Vec<<G as petgraph::visit::GraphBase>::NodeId>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":140},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28106,"byte_end":28117,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"name":"output_node","qualname":"::node::graph::GraphNode::output_node","value":"<G as petgraph::visit::GraphBase>::NodeId","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":141},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28138,"byte_end":28147,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"name":"node_type","qualname":"::node::graph::GraphNode::node_type","value":"std::marker::PhantomData<T>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":261},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":30004,"byte_end":30008,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Pass","qualname":"::node::pass::Pass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A simple node that passes an input directly to the output.","sig":null,"attributes":[{"value":"/ A simple node that passes an input directly to the output.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29551,"byte_end":29613,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29614,"byte_end":29617,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Works by mem-copying each buffer of the first input to each buffer of the output respectively.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29618,"byte_end":29716,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29717,"byte_end":29720,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This can be useful as an intermediary node when feeding the output of a node back into one of","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29721,"byte_end":29818,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ its inputs. It can also be useful for discarding excess input channels by having a `Pass` with","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29819,"byte_end":29917,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ less output buffers than its input.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":29918,"byte_end":29957,"line_start":9,"line_end":9,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31200,"byte_end":31203,"line_start":7,"line_end":7,"column_start":12,"column_end":15},"name":"Sum","qualname":"::node::sum::Sum","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stateless node that sums each of the inputs onto the output.","sig":null,"attributes":[{"value":"/ A stateless node that sums each of the inputs onto the output.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":30992,"byte_end":31058,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31059,"byte_end":31062,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Assumes that the number of buffers per input is equal to the number of output buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31063,"byte_end":31153,"line_start":5,"line_end":5,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31854,"byte_end":31864,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"SumBuffers","qualname":"::node::sum::SumBuffers","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stateless node that sums all of the buffers of all of the inputs onto each of the output\n buffers.","sig":null,"attributes":[{"value":"/ A stateless node that sums all of the buffers of all of the inputs onto each of the output","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31206,"byte_end":31300,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"/ buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31301,"byte_end":31313,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31314,"byte_end":31317,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ E.g. Given two inputs with three buffers each, all 6 input buffers will be summed onto the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31318,"byte_end":31412,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ first output buffer. If there is more than one output buffer, the result is copied to the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31413,"byte_end":31506,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ remaining output buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31507,"byte_end":31536,"line_start":14,"line_end":14,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31537,"byte_end":31540,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ After a call to `Node::process`, each of the output buffers will always have the same contents.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31541,"byte_end":31640,"line_start":16,"line_end":16,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31641,"byte_end":31644,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Common use cases:","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31645,"byte_end":31666,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31667,"byte_end":31670,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - Summing multiple input channels down to a single output channel.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31671,"byte_end":31741,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ - Writing a single input channel to multiple output channels.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31742,"byte_end":31807,"line_start":21,"line_end":21,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":173},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20548,"byte_end":20552,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Node","qualname":"::node::Node","value":"Node","parent":null,"children":[{"krate":0,"index":174}],"decl_id":null,"docs":" The `Node` type used within a dasp graph must implement this trait.","sig":null,"attributes":[{"value":"/ The `Node` type used within a dasp graph must implement this trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18895,"byte_end":18966,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18967,"byte_end":18970,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The implementation describes how audio is processed from its inputs to outputs.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":18971,"byte_end":19054,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19055,"byte_end":19058,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ - Audio **sources** or **inputs** may simply ignore the `inputs` field and write their source","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19059,"byte_end":19156,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/   data directly to the `output` buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19157,"byte_end":19201,"line_start":33,"line_end":33,"column_start":1,"column_end":45}},{"value":"/ - Audio **processors**, **effects** or **sinks** may read from their `inputs`, apply some","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19202,"byte_end":19295,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/   custom processing and write the result to their `output` buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19296,"byte_end":19367,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19368,"byte_end":19371,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Multiple `Node` implementations are provided and can be enabled or disabled via [their","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19372,"byte_end":19462,"line_start":37,"line_end":37,"column_start":1,"column_end":91}},{"value":"/ associated features](../index.html#optional-features).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19463,"byte_end":19521,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19522,"byte_end":19525,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19526,"byte_end":19539,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19540,"byte_end":19543,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The following demonstrates how to implement a simple node that sums each of its inputs onto the","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19544,"byte_end":19643,"line_start":42,"line_end":42,"column_start":1,"column_end":100}},{"value":"/ output.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19644,"byte_end":19655,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19656,"byte_end":19659,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19660,"byte_end":19671,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/ use dasp_graph::{Buffer, Input, Node};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19672,"byte_end":19714,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19715,"byte_end":19718,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // Our new `Node` type.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19719,"byte_end":19746,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/ pub struct Sum;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19747,"byte_end":19766,"line_start":49,"line_end":49,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19767,"byte_end":19770,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Implement the `Node` trait for our new type.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19771,"byte_end":19822,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ # #[cfg(feature = \"dasp_slice\")]","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19823,"byte_end":19859,"line_start":52,"line_end":52,"column_start":1,"column_end":37}},{"value":"/ impl Node for Sum {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19860,"byte_end":19883,"line_start":53,"line_end":53,"column_start":1,"column_end":24}},{"value":"/     fn process(&mut self, inputs: &[Input], output: &mut [Buffer]) {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19884,"byte_end":19956,"line_start":54,"line_end":54,"column_start":1,"column_end":73}},{"value":"/         // Fill the output with silence.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":19957,"byte_end":20001,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/         for out_buffer in output.iter_mut() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20002,"byte_end":20051,"line_start":56,"line_end":56,"column_start":1,"column_end":50}},{"value":"/             out_buffer.silence();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20052,"byte_end":20089,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20090,"byte_end":20103,"line_start":58,"line_end":58,"column_start":1,"column_end":14}},{"value":"/         // Sum the inputs onto the output.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20104,"byte_end":20150,"line_start":59,"line_end":59,"column_start":1,"column_end":47}},{"value":"/         for (channel, out_buffer) in output.iter_mut().enumerate() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20151,"byte_end":20223,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/             for input in inputs {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20224,"byte_end":20261,"line_start":61,"line_end":61,"column_start":1,"column_end":38}},{"value":"/                 let in_buffers = input.buffers();","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20262,"byte_end":20315,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/                 if let Some(in_buffer) = in_buffers.get(channel) {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20316,"byte_end":20386,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/                     dasp_slice::add_in_place(out_buffer, in_buffer);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20387,"byte_end":20459,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/                 }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20460,"byte_end":20481,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20482,"byte_end":20499,"line_start":66,"line_end":66,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20500,"byte_end":20513,"line_start":67,"line_end":67,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20514,"byte_end":20523,"line_start":68,"line_end":68,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20524,"byte_end":20529,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20530,"byte_end":20537,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21367,"byte_end":21374,"line_start":85,"line_end":85,"column_start":8,"column_end":15},"name":"process","qualname":"::node::Node::process","value":"fn (&mut self, inputs: &[Input], output: &mut [Buffer]) -> ()","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Process some audio given a list of the node's `inputs` and write the result to the `output`\n buffers.","sig":null,"attributes":[{"value":"/ Process some audio given a list of the node's `inputs` and write the result to the `output`","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20559,"byte_end":20654,"line_start":72,"line_end":72,"column_start":5,"column_end":100}},{"value":"/ buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20659,"byte_end":20671,"line_start":73,"line_end":73,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20676,"byte_end":20679,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ `inputs` represents a list of all nodes with direct edges toward this node. Each","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20684,"byte_end":20768,"line_start":75,"line_end":75,"column_start":5,"column_end":89}},{"value":"/ [`Input`](./struct.Input.html) within the list can providee a reference to the output","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20773,"byte_end":20862,"line_start":76,"line_end":76,"column_start":5,"column_end":94}},{"value":"/ buffers of their corresponding node.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20867,"byte_end":20907,"line_start":77,"line_end":77,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20912,"byte_end":20915,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ The `inputs` may be ignored if the implementation is for a source node. Alternatively, if","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":20920,"byte_end":21013,"line_start":79,"line_end":79,"column_start":5,"column_end":98}},{"value":"/ the `Node` only supports a specific number of `input`s, it is up to the user to decide how","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21018,"byte_end":21112,"line_start":80,"line_end":80,"column_start":5,"column_end":99}},{"value":"/ they wish to enforce this or provide feedback at the time of graph and edge creation.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21117,"byte_end":21206,"line_start":81,"line_end":81,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21211,"byte_end":21214,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This `process` method is called by the [`Processor`](../struct.Processor.html) as it","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21219,"byte_end":21307,"line_start":83,"line_end":83,"column_start":5,"column_end":93}},{"value":"/ traverses the graph during audio rendering.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21312,"byte_end":21359,"line_start":84,"line_end":84,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21722,"byte_end":21727,"line_start":93,"line_end":93,"column_start":12,"column_end":17},"name":"Input","qualname":"::node::Input","value":"Input {  }","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"decl_id":null,"docs":" A reference to another node that is an input to the current node.","sig":null,"attributes":[{"value":"/ A reference to another node that is an input to the current node.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21431,"byte_end":21500,"line_start":88,"line_end":88,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21501,"byte_end":21504,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ *TODO: It may be useful to provide some information that can uniquely identify the input node.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21505,"byte_end":21603,"line_start":90,"line_end":90,"column_start":1,"column_end":99}},{"value":"/ This could be useful to allow to distinguish between side-chained and regular inputs for","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21604,"byte_end":21696,"line_start":91,"line_end":91,"column_start":1,"column_end":93}},{"value":"/ example.*","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21697,"byte_end":21710,"line_start":92,"line_end":92,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":22152,"byte_end":22159,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"buffers","qualname":"<Input>::buffers","value":"fn (&self) -> &[Buffer]","parent":null,"children":[],"decl_id":null,"docs":" A reference to the buffers of the input node.\n","sig":null,"attributes":[{"value":"/ A reference to the buffers of the input node.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":22091,"byte_end":22140,"line_start":109,"line_end":109,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":197},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9713,"byte_end":9722,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"Processor","qualname":"::Processor","value":"Processor {  }","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" State related to the processing of an audio graph of type `G`.","sig":null,"attributes":[{"value":"/ State related to the processing of an audio graph of type `G`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8269,"byte_end":8335,"line_start":141,"line_end":141,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8336,"byte_end":8339,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ The **Processor** allows for the re-use of resources related to traversal and requesting audio","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8340,"byte_end":8438,"line_start":143,"line_end":143,"column_start":1,"column_end":99}},{"value":"/ from the graph. This makes it easier to avoid dynamic allocation within a high-priority audio","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8439,"byte_end":8536,"line_start":144,"line_end":144,"column_start":1,"column_end":98}},{"value":"/ context.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8537,"byte_end":8549,"line_start":145,"line_end":145,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8550,"byte_end":8553,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8554,"byte_end":8567,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8568,"byte_end":8571,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8572,"byte_end":8579,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use dasp_graph::{Node, NodeData};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8580,"byte_end":8617,"line_start":150,"line_end":150,"column_start":1,"column_end":38}},{"value":"/ # use dasp_graph::{Buffer, Input};","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8618,"byte_end":8656,"line_start":151,"line_end":151,"column_start":1,"column_end":39}},{"value":"/ use petgraph;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8657,"byte_end":8674,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/ #","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8675,"byte_end":8680,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/ # // The node type. (Hint: Use existing node impls by enabling their associated features).","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8681,"byte_end":8775,"line_start":154,"line_end":154,"column_start":1,"column_end":95}},{"value":"/ # struct MyNode;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8776,"byte_end":8796,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8797,"byte_end":8800,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ // Chose a type of graph for audio processing.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8801,"byte_end":8851,"line_start":157,"line_end":157,"column_start":1,"column_end":51}},{"value":"/ type Graph = petgraph::graph::DiGraph<NodeData<MyNode>, (), u32>;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8852,"byte_end":8921,"line_start":158,"line_end":158,"column_start":1,"column_end":70}},{"value":"/ // Create a short-hand for our processor type.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8922,"byte_end":8972,"line_start":159,"line_end":159,"column_start":1,"column_end":51}},{"value":"/ type Processor = dasp_graph::Processor<Graph>;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8973,"byte_end":9023,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/ #","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9024,"byte_end":9029,"line_start":161,"line_end":161,"column_start":1,"column_end":6}},{"value":"/ # impl Node for MyNode {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9030,"byte_end":9058,"line_start":162,"line_end":162,"column_start":1,"column_end":29}},{"value":"/ #     // ...","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9059,"byte_end":9075,"line_start":163,"line_end":163,"column_start":1,"column_end":17}},{"value":"/ #    fn process(&mut self, _inputs: &[Input], _output: &mut [Buffer]) {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9076,"byte_end":9151,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ #    }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9152,"byte_end":9162,"line_start":165,"line_end":165,"column_start":1,"column_end":11}},{"value":"/ # }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9163,"byte_end":9170,"line_start":166,"line_end":166,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9171,"byte_end":9174,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9175,"byte_end":9190,"line_start":168,"line_end":168,"column_start":1,"column_end":16}},{"value":"/     // Create a graph and a processor with some suitable capacity to avoid dynamic allocation.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9191,"byte_end":9289,"line_start":169,"line_end":169,"column_start":1,"column_end":99}},{"value":"/     let max_nodes = 1024;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9290,"byte_end":9319,"line_start":170,"line_end":170,"column_start":1,"column_end":30}},{"value":"/     let max_edges = 1024;","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9320,"byte_end":9349,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"/     let mut g = Graph::with_capacity(max_nodes, max_edges);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9350,"byte_end":9413,"line_start":172,"line_end":172,"column_start":1,"column_end":64}},{"value":"/     let mut p = Processor::with_capacity(max_nodes);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9414,"byte_end":9470,"line_start":173,"line_end":173,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9471,"byte_end":9474,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/     // Add some nodes and edges...","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9475,"byte_end":9513,"line_start":175,"line_end":175,"column_start":1,"column_end":39}},{"value":"/ #    let n_id = g.add_node(NodeData::new1(MyNode));","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9514,"byte_end":9569,"line_start":176,"line_end":176,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9570,"byte_end":9573,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/     // Process all nodes within the graph that output to the node at `n_id`.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9574,"byte_end":9654,"line_start":178,"line_end":178,"column_start":1,"column_end":81}},{"value":"/     p.process(&mut g, n_id);","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9655,"byte_end":9687,"line_start":179,"line_end":179,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9688,"byte_end":9693,"line_start":180,"line_end":180,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":9694,"byte_end":9701,"line_start":181,"line_end":181,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":201},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10294,"byte_end":10302,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"NodeData","qualname":"::NodeData","value":"NodeData { buffers, node }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"decl_id":null,"docs":" For use as the node weight within a dasp graph. Contains the node and its buffers.","sig":null,"attributes":[{"value":"/ For use as the node weight within a dasp graph. Contains the node and its buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10022,"byte_end":10108,"line_start":192,"line_end":192,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10109,"byte_end":10112,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ For a graph to be compatible with a graph **Processor**, its node weights must be of type","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10113,"byte_end":10206,"line_start":194,"line_end":194,"column_start":1,"column_end":94}},{"value":"/ `NodeData<T>`, where `T` is some type that implements the `Node` trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10207,"byte_end":10282,"line_start":195,"line_end":195,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":203},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10654,"byte_end":10661,"line_start":202,"line_end":202,"column_start":9,"column_end":16},"name":"buffers","qualname":"::NodeData::buffers","value":"std::vec::Vec<buffer::Buffer>","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" The buffers to which the `node` writes audio data during a call to its `process` method.","sig":null,"attributes":[{"value":"/ The buffers to which the `node` writes audio data during a call to its `process` method.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10320,"byte_end":10412,"line_start":197,"line_end":197,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10417,"byte_end":10420,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Generally, each buffer stored within `buffers` corresponds to a unique audio channel. E.g.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10425,"byte_end":10519,"line_start":199,"line_end":199,"column_start":5,"column_end":99}},{"value":"/ a node processing mono data would store one buffer, a node processing stereo data would","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10524,"byte_end":10615,"line_start":200,"line_end":200,"column_start":5,"column_end":96}},{"value":"/ store two, and so on.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10620,"byte_end":10645,"line_start":201,"line_end":201,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":204},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10684,"byte_end":10688,"line_start":203,"line_end":203,"column_start":9,"column_end":13},"name":"node","qualname":"::NodeData::node","value":"T","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10991,"byte_end":11004,"line_start":214,"line_end":214,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Processor<G>>::with_capacity","value":"fn (max_nodes: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new graph processor from the given maximum anticipated node count.","sig":null,"attributes":[{"value":"/ Construct a new graph processor from the given maximum anticipated node count.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10747,"byte_end":10829,"line_start":210,"line_end":210,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10834,"byte_end":10837,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ As long as this node count is not exceeded, the **Processor** should never require dynamic","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10842,"byte_end":10936,"line_start":212,"line_end":212,"column_start":5,"column_end":99}},{"value":"/ allocation following construction.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10941,"byte_end":10979,"line_start":213,"line_end":213,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12233,"byte_end":12240,"line_start":243,"line_end":243,"column_start":12,"column_end":19},"name":"process","qualname":"<Processor<G>>::process","value":"fn <T> (&mut self, graph: &mut G, node: G::NodeId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Process audio through the subgraph ending at the node with the given ID.","sig":null,"attributes":[{"value":"/ Process audio through the subgraph ending at the node with the given ID.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11328,"byte_end":11404,"line_start":227,"line_end":227,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11409,"byte_end":11412,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Specifically, this traverses nodes in depth-first-search *post* order where the edges of","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11417,"byte_end":11509,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/ the graph are reversed. This is equivalent to the topological order of all nodes that are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11514,"byte_end":11607,"line_start":230,"line_end":230,"column_start":5,"column_end":98}},{"value":"/ connected to the inputs of the given `node`. This ensures that all inputs of each node are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11612,"byte_end":11706,"line_start":231,"line_end":231,"column_start":5,"column_end":99}},{"value":"/ visited before the node itself.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11711,"byte_end":11746,"line_start":232,"line_end":232,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11751,"byte_end":11754,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The `Node::process` method is called on each node as they are visited in the traversal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11759,"byte_end":11850,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11855,"byte_end":11858,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Upon returning, the buffers of each visited node will contain the audio processed by their","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11863,"byte_end":11957,"line_start":236,"line_end":236,"column_start":5,"column_end":99}},{"value":"/ respective nodes.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11962,"byte_end":11983,"line_start":237,"line_end":237,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11988,"byte_end":11991,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Supports all graphs that implement the necessary petgraph traits and whose nodes are of","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":11996,"byte_end":12087,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/ type `NodeData<T>` where `T` implements the `Node` trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12092,"byte_end":12153,"line_start":240,"line_end":240,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12158,"byte_end":12161,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ **Panics** if there is no node for the given index.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12166,"byte_end":12221,"line_start":242,"line_end":242,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12615,"byte_end":12618,"line_start":255,"line_end":255,"column_start":12,"column_end":15},"name":"new","qualname":"<NodeData<T>>::new","value":"fn (node: T, buffers: Vec<Buffer>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new **NodeData** from an instance of its node type and buffers.\n","sig":null,"attributes":[{"value":"/ Construct a new **NodeData** from an instance of its node type and buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12524,"byte_end":12603,"line_start":254,"line_end":254,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12770,"byte_end":12774,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"name":"new1","qualname":"<NodeData<T>>::new1","value":"fn (node: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new **NodeData** with a single buffer.\n","sig":null,"attributes":[{"value":"/ Creates a new **NodeData** with a single buffer.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12706,"byte_end":12758,"line_start":259,"line_end":259,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12911,"byte_end":12915,"line_start":265,"line_end":265,"column_start":12,"column_end":16},"name":"new2","qualname":"<NodeData<T>>::new2","value":"fn (node: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new **NodeData** with two buffers.\n","sig":null,"attributes":[{"value":"/ Creates a new **NodeData** with two buffers.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12851,"byte_end":12899,"line_start":264,"line_end":264,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13140,"byte_end":13145,"line_start":273,"line_end":273,"column_start":12,"column_end":17},"name":"boxed","qualname":"<NodeData<BoxedNode>>::boxed","value":"fn <T> (node: T, buffers: Vec<Buffer>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as **new**, but boxes the given node data before storing it.\n","sig":null,"attributes":[{"value":"/ The same as **new**, but boxes the given node data before storing it.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13055,"byte_end":13128,"line_start":272,"line_end":272,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13386,"byte_end":13392,"line_start":281,"line_end":281,"column_start":12,"column_end":18},"name":"boxed1","qualname":"<NodeData<BoxedNode>>::boxed1","value":"fn <T> (node: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as **new1**, but boxes the given node data before storing it.\n","sig":null,"attributes":[{"value":"/ The same as **new1**, but boxes the given node data before storing it.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13300,"byte_end":13374,"line_start":280,"line_end":280,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13601,"byte_end":13607,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"boxed2","qualname":"<NodeData<BoxedNode>>::boxed2","value":"fn <T> (node: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as **new2**, but boxes the given node data before storing it.\n","sig":null,"attributes":[{"value":"/ The same as **new2**, but boxes the given node data before storing it.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13515,"byte_end":13589,"line_start":288,"line_end":288,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14585,"byte_end":14592,"line_start":313,"line_end":313,"column_start":8,"column_end":15},"name":"process","qualname":"::process","value":"fn <G, T> (processor: &mut Processor<G>, graph: &mut G, node: G::NodeId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Process audio through the subgraph ending at the node with the given ID.","sig":null,"attributes":[{"value":"/ Process audio through the subgraph ending at the node with the given ID.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13744,"byte_end":13820,"line_start":297,"line_end":297,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13821,"byte_end":13824,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ Specifically, this traverses nodes in depth-first-search *post* order where the edges of","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13825,"byte_end":13917,"line_start":299,"line_end":299,"column_start":1,"column_end":93}},{"value":"/ the graph are reversed. This is equivalent to the topological order of all nodes that are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13918,"byte_end":14011,"line_start":300,"line_end":300,"column_start":1,"column_end":94}},{"value":"/ connected to the inputs of the given `node`. This ensures that all inputs of each node are","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14012,"byte_end":14106,"line_start":301,"line_end":301,"column_start":1,"column_end":95}},{"value":"/ visited before the node itself.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14107,"byte_end":14142,"line_start":302,"line_end":302,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14143,"byte_end":14146,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ The `Node::process` method is called on each node as they are visited in the traversal.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14147,"byte_end":14238,"line_start":304,"line_end":304,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14239,"byte_end":14242,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ Upon returning, the buffers of each visited node will contain the audio processed by their","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14243,"byte_end":14337,"line_start":306,"line_end":306,"column_start":1,"column_end":95}},{"value":"/ respective nodes.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14338,"byte_end":14359,"line_start":307,"line_end":307,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14360,"byte_end":14363,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ Supports all graphs that implement the necessary petgraph traits and whose nodes are of","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14364,"byte_end":14455,"line_start":309,"line_end":309,"column_start":1,"column_end":92}},{"value":"/ type `NodeData<T>` where `T` implements the `Node` trait.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14456,"byte_end":14517,"line_start":310,"line_end":310,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14518,"byte_end":14521,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ **Panics** if there is no node for the given index.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":14522,"byte_end":14577,"line_start":312,"line_end":312,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16245,"byte_end":16252,"line_start":349,"line_end":349,"column_start":8,"column_end":15},"name":"sources","qualname":"::sources","value":"fn <'a, G> (g: &'a G) -> impl 'a + Iterator<Item = G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding IDs for all **source** nodes within the graph.","sig":null,"attributes":[{"value":"/ Produce an iterator yielding IDs for all **source** nodes within the graph.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16080,"byte_end":16159,"line_start":346,"line_end":346,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16160,"byte_end":16163,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ A node is considered to be a source node if it has no incoming edges.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16164,"byte_end":16237,"line_start":348,"line_end":348,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16753,"byte_end":16758,"line_start":364,"line_end":364,"column_start":8,"column_end":13},"name":"sinks","qualname":"::sinks","value":"fn <'a, G> (g: &'a G) -> impl 'a + Iterator<Item = G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding IDs for all **sink** nodes within the graph.","sig":null,"attributes":[{"value":"/ Produce an iterator yielding IDs for all **sink** nodes within the graph.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16588,"byte_end":16665,"line_start":361,"line_end":361,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16666,"byte_end":16669,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ A node is considered to be a **sink** node if it has no outgoing edges.","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":16670,"byte_end":16745,"line_start":363,"line_end":363,"column_start":1,"column_end":76}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17274,"byte_end":17280,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17637,"byte_end":17643,"line_start":24,"line_end":24,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17735,"byte_end":17741,"line_start":30,"line_end":30,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17843,"byte_end":17849,"line_start":36,"line_end":36,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17982,"byte_end":17988,"line_start":42,"line_end":42,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":18088,"byte_end":18094,"line_start":48,"line_end":48,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":18211,"byte_end":18217,"line_start":55,"line_end":55,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24451,"byte_end":24460,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24722,"byte_end":24735,"line_start":33,"line_end":33,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25013,"byte_end":25022,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25156,"byte_end":25169,"line_start":51,"line_end":51,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25314,"byte_end":25323,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25460,"byte_end":25473,"line_start":66,"line_end":66,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25632,"byte_end":25641,"line_start":75,"line_end":75,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25741,"byte_end":25754,"line_start":81,"line_end":81,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25845,"byte_end":25854,"line_start":87,"line_end":87,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25990,"byte_end":26003,"line_start":93,"line_end":93,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26138,"byte_end":26147,"line_start":99,"line_end":99,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26262,"byte_end":26275,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26400,"byte_end":26409,"line_start":113,"line_end":113,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26510,"byte_end":26523,"line_start":119,"line_end":119,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":27057,"byte_end":27062,"line_start":12,"line_end":12,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28188,"byte_end":28197,"line_start":21,"line_end":21,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":30025,"byte_end":30029,"line_start":13,"line_end":13,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31881,"byte_end":31884,"line_start":25,"line_end":25,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":32484,"byte_end":32494,"line_start":43,"line_end":43,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21794,"byte_end":21799,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":22775,"byte_end":22780,"line_start":121,"line_end":121,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":22805,"byte_end":22810,"line_start":123,"line_end":123,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":23112,"byte_end":23115,"line_start":138,"line_end":138,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10704,"byte_end":10713,"line_start":206,"line_end":206,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12506,"byte_end":12514,"line_start":253,"line_end":253,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13029,"byte_end":13037,"line_start":271,"line_end":271,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":8262,"byte_end":8266,"line_start":139,"line_end":139,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":50}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17274,"byte_end":17280,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17637,"byte_end":17643,"line_start":24,"line_end":24,"column_start":18,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17735,"byte_end":17741,"line_start":30,"line_end":30,"column_start":33,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17843,"byte_end":17849,"line_start":36,"line_end":36,"column_start":21,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":17982,"byte_end":17988,"line_start":42,"line_end":42,"column_start":20,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":1588}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":18088,"byte_end":18094,"line_start":48,"line_end":48,"column_start":16,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/buffer.rs","byte_start":18211,"byte_end":18217,"line_start":55,"line_end":55,"column_start":19,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24451,"byte_end":24460,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":71},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":24722,"byte_end":24735,"line_start":33,"line_end":33,"column_start":6,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25013,"byte_end":25022,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":71},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25156,"byte_end":25169,"line_start":51,"line_end":51,"column_start":15,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":74},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25314,"byte_end":25323,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25460,"byte_end":25473,"line_start":66,"line_end":66,"column_start":26,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25632,"byte_end":25641,"line_start":75,"line_end":75,"column_start":30,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":1773}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25741,"byte_end":25754,"line_start":81,"line_end":81,"column_start":37,"column_end":50},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":1773}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25845,"byte_end":25854,"line_start":87,"line_end":87,"column_start":21,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":25990,"byte_end":26003,"line_start":93,"line_end":93,"column_start":21,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26138,"byte_end":26147,"line_start":99,"line_end":99,"column_start":16,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26262,"byte_end":26275,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26400,"byte_end":26409,"line_start":113,"line_end":113,"column_start":19,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/boxed.rs","byte_start":26510,"byte_end":26523,"line_start":119,"line_end":119,"column_start":19,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/delay.rs","byte_start":27057,"byte_end":27062,"line_start":12,"line_end":12,"column_start":18,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":245},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/graph.rs","byte_start":28188,"byte_end":28197,"line_start":21,"line_end":21,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":134},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/pass.rs","byte_start":30025,"byte_end":30029,"line_start":13,"line_end":13,"column_start":15,"column_end":19},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":261},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":31881,"byte_end":31884,"line_start":25,"line_end":25,"column_start":15,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":270},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/sum.rs","byte_start":32484,"byte_end":32494,"line_start":43,"line_end":43,"column_start":15,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":279},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":21794,"byte_end":21799,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":22775,"byte_end":22780,"line_start":121,"line_end":121,"column_start":22,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":22805,"byte_end":22810,"line_start":123,"line_end":123,"column_start":21,"column_end":26},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/node/mod.rs","byte_start":23112,"byte_end":23115,"line_start":138,"line_end":138,"column_start":18,"column_end":21},"kind":{"Impl":{"id":29}},"from":{"krate":5,"index":81},"to":{"krate":0,"index":173}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":10704,"byte_end":10713,"line_start":206,"line_end":206,"column_start":9,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":12506,"byte_end":12514,"line_start":253,"line_end":253,"column_start":9,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/chaosprint/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_graph-0.11.0/src/lib.rs","byte_start":13029,"byte_end":13037,"line_start":271,"line_end":271,"column_start":6,"column_end":14},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}}]}